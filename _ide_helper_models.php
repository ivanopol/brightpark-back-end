<?php
/** @noinspection PhpUndefinedClassInspection */
/** @noinspection PhpFullyQualifiedNameUsageInspection */
/** @noinspection PhpUnusedAliasInspection */

namespace App {

	use Illuminate\Contracts\Support\Arrayable;
	use Illuminate\Database\Eloquent\Model;
	use Illuminate\Database\Eloquent\Relations\BelongsTo;
	use Illuminate\Database\Eloquent\Relations\BelongsToMany;
	use Illuminate\Database\Eloquent\Relations\HasOne;
	use Illuminate\Database\Eloquent\Relations\MorphToMany;
	use Illuminate\Database\Eloquent\Scope;
	use Illuminate\Notifications\DatabaseNotification;
	use Illuminate\Support\Carbon;
	use LaravelIdea\Helper\App\_CarCollection;
	use LaravelIdea\Helper\App\_CarModelCarTypeCollection;
	use LaravelIdea\Helper\App\_CarModelCarTypeQueryBuilder;
	use LaravelIdea\Helper\App\_CarModelCollection;
	use LaravelIdea\Helper\App\_CarModelQueryBuilder;
	use LaravelIdea\Helper\App\_CarQueryBuilder;
	use LaravelIdea\Helper\App\_CarTypeCollection;
	use LaravelIdea\Helper\App\_CarTypeQueryBuilder;
	use LaravelIdea\Helper\App\_CityCollection;
	use LaravelIdea\Helper\App\_CityQueryBuilder;
	use LaravelIdea\Helper\App\_ContactsCollection;
	use LaravelIdea\Helper\App\_ContactsQueryBuilder;
	use LaravelIdea\Helper\App\_NewsCollection;
	use LaravelIdea\Helper\App\_NewsQueryBuilder;
	use LaravelIdea\Helper\App\_RetargetCollection;
	use LaravelIdea\Helper\App\_RetargetQueryBuilder;
	use LaravelIdea\Helper\App\_SeoCollection;
	use LaravelIdea\Helper\App\_SeoQueryBuilder;
	use LaravelIdea\Helper\App\_StocksCollection;
	use LaravelIdea\Helper\App\_StocksQueryBuilder;
	use LaravelIdea\Helper\App\_UserCollection;
	use LaravelIdea\Helper\App\_UserQueryBuilder;
	use LaravelIdea\Helper\Illuminate\Notifications\_DatabaseNotificationCollection;
	use LaravelIdea\Helper\Illuminate\Notifications\_DatabaseNotificationQueryBuilder;

	/**
	 * @property int $car_model_id
	 * @property int $car_type_id
	 * @property bool $preview
	 * @property int $price
	 * @property int $special_price
	 * @property int $count
	 * @property string|null $image
	 * @property string|null $slogan
	 * @property int $active
	 * @method _CarQueryBuilder newModelQuery()
	 * @method _CarQueryBuilder newQuery()
	 * @method static _CarQueryBuilder query()
	 * @method static _CarCollection|Car[] all()
	 * @method static _CarQueryBuilder whereCarModelId($value)
	 * @method static _CarQueryBuilder whereCarTypeId($value)
	 * @method static _CarQueryBuilder wherePreview($value)
	 * @method static _CarQueryBuilder wherePrice($value)
	 * @method static _CarQueryBuilder whereSpecialPrice($value)
	 * @method static _CarQueryBuilder whereCount($value)
	 * @method static _CarQueryBuilder whereImage($value)
	 * @method static _CarQueryBuilder whereSlogan($value)
	 * @method static _CarQueryBuilder whereActive($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Car create(array $attributes = [])
	 * @method static _CarQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _CarCollection|Car[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _CarQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Car|null find($id, array $columns = ['*'])
	 * @method static _CarCollection|Car[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static Car findOrFail($id, array $columns = ['*'])
	 * @method static _CarCollection|Car[] findOrNew($id, array $columns = ['*'])
	 * @method static Car first(array|string $columns = ['*'])
	 * @method static Car firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static Car firstOrCreate(array $attributes, array $values = [])
	 * @method static Car firstOrFail(array $columns = ['*'])
	 * @method static Car firstOrNew(array $attributes, array $values = [])
	 * @method static Car firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Car forceCreate(array $attributes)
	 * @method static _CarCollection|Car[] fromQuery(string $query, array $bindings = [])
	 * @method static _CarCollection|Car[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static Car getModel()
	 * @method static Car[] getModels(array|string $columns = ['*'])
	 * @method static _CarQueryBuilder getQuery()
	 * @method static _CarQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _CarCollection|Car[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _CarQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _CarQueryBuilder latest(string $column = null)
	 * @method static _CarQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CarQueryBuilder limit(int $value)
	 * @method static Car make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static Car newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _CarQueryBuilder offset(int $value)
	 * @method static _CarQueryBuilder oldest(string $column = null)
	 * @method static _CarQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _CarQueryBuilder orderByDesc(string $column)
	 * @method static _CarQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _CarQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _CarQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CarQueryBuilder select(array $columns = ['*'])
	 * @method static _CarQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _CarQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _CarQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _CarQueryBuilder take(int $value)
	 * @method static _CarQueryBuilder tap(callable $callback)
	 * @method static _CarQueryBuilder truncate()
	 * @method static _CarQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Car updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _CarQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _CarQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _CarQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _CarQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _CarQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _CarQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CarQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CarQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _CarQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereKey($id)
	 * @method static _CarQueryBuilder whereKeyNot($id)
	 * @method static _CarQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _CarQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _CarQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _CarQueryBuilder with($relations)
	 * @method static _CarQueryBuilder withCount($relations)
	 * @method static _CarQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _CarQueryBuilder without($relations)
	 * @method static _CarQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _CarQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Car extends Model
	{
	}

	/**
	 * @property int $id
	 * @property string $title
	 * @property string $slug
	 * @property string $description
	 * @property string $preview
	 * @property _CarTypeCollection|CarType[] $carcasses
	 * @method BelongsToMany|_CarTypeQueryBuilder carcasses()
	 * @property CarType $prices
	 * @method HasOne|_CarTypeQueryBuilder prices()
	 * @property _CarTypeCollection|CarType[] $types
	 * @method BelongsToMany|_CarTypeQueryBuilder types()
	 * @property _CarTypeCollection|CarType[] $types_preview
	 * @method BelongsToMany|_CarTypeQueryBuilder types_preview()
	 * @method _CarModelQueryBuilder newModelQuery()
	 * @method _CarModelQueryBuilder newQuery()
	 * @method static _CarModelQueryBuilder query()
	 * @method static _CarModelCollection|CarModel[] all()
	 * @method static _CarModelQueryBuilder whereId($value)
	 * @method static _CarModelQueryBuilder whereTitle($value)
	 * @method static _CarModelQueryBuilder whereSlug($value)
	 * @method static _CarModelQueryBuilder whereDescription($value)
	 * @method static _CarModelQueryBuilder wherePreview($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static CarModel create(array $attributes = [])
	 * @method static _CarModelQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _CarModelCollection|CarModel[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _CarModelQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static CarModel|null find($id, array $columns = ['*'])
	 * @method static _CarModelCollection|CarModel[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static CarModel findOrFail($id, array $columns = ['*'])
	 * @method static _CarModelCollection|CarModel[] findOrNew($id, array $columns = ['*'])
	 * @method static CarModel first(array|string $columns = ['*'])
	 * @method static CarModel firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static CarModel firstOrCreate(array $attributes, array $values = [])
	 * @method static CarModel firstOrFail(array $columns = ['*'])
	 * @method static CarModel firstOrNew(array $attributes, array $values = [])
	 * @method static CarModel firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static CarModel forceCreate(array $attributes)
	 * @method static _CarModelCollection|CarModel[] fromQuery(string $query, array $bindings = [])
	 * @method static _CarModelCollection|CarModel[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static CarModel getModel()
	 * @method static CarModel[] getModels(array|string $columns = ['*'])
	 * @method static _CarModelQueryBuilder getQuery()
	 * @method static _CarModelQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _CarModelCollection|CarModel[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _CarModelQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _CarModelQueryBuilder latest(string $column = null)
	 * @method static _CarModelQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CarModelQueryBuilder limit(int $value)
	 * @method static CarModel make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static CarModel newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _CarModelQueryBuilder offset(int $value)
	 * @method static _CarModelQueryBuilder oldest(string $column = null)
	 * @method static _CarModelQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _CarModelQueryBuilder orderByDesc(string $column)
	 * @method static _CarModelQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _CarModelQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _CarModelQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CarModelQueryBuilder select(array $columns = ['*'])
	 * @method static _CarModelQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _CarModelQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _CarModelQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _CarModelQueryBuilder take(int $value)
	 * @method static _CarModelQueryBuilder tap(callable $callback)
	 * @method static _CarModelQueryBuilder truncate()
	 * @method static _CarModelQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static CarModel updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _CarModelQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _CarModelQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _CarModelQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _CarModelQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CarModelQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CarModelQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereKey($id)
	 * @method static _CarModelQueryBuilder whereKeyNot($id)
	 * @method static _CarModelQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _CarModelQueryBuilder with($relations)
	 * @method static _CarModelQueryBuilder withCount($relations)
	 * @method static _CarModelQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _CarModelQueryBuilder without($relations)
	 * @method static _CarModelQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _CarModelQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class CarModel extends Model
	{
	}

	/**
	 * @property int $car_model_id
	 * @property int $car_type_id
	 * @property bool $preview
	 * @property int $price
	 * @property int $special_price
	 * @property int $count
	 * @property string|null $image
	 * @property string|null $slogan
	 * @property int $active
	 * @method _CarModelCarTypeQueryBuilder newModelQuery()
	 * @method _CarModelCarTypeQueryBuilder newQuery()
	 * @method static _CarModelCarTypeQueryBuilder query()
	 * @method static _CarModelCarTypeCollection|CarModelCarType[] all()
	 * @method static _CarModelCarTypeQueryBuilder whereCarModelId($value)
	 * @method static _CarModelCarTypeQueryBuilder whereCarTypeId($value)
	 * @method static _CarModelCarTypeQueryBuilder wherePreview($value)
	 * @method static _CarModelCarTypeQueryBuilder wherePrice($value)
	 * @method static _CarModelCarTypeQueryBuilder whereSpecialPrice($value)
	 * @method static _CarModelCarTypeQueryBuilder whereCount($value)
	 * @method static _CarModelCarTypeQueryBuilder whereImage($value)
	 * @method static _CarModelCarTypeQueryBuilder whereSlogan($value)
	 * @method static _CarModelCarTypeQueryBuilder whereActive($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static CarModelCarType create(array $attributes = [])
	 * @method static _CarModelCarTypeQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _CarModelCarTypeCollection|CarModelCarType[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _CarModelCarTypeQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static CarModelCarType|null find($id, array $columns = ['*'])
	 * @method static _CarModelCarTypeCollection|CarModelCarType[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static CarModelCarType findOrFail($id, array $columns = ['*'])
	 * @method static _CarModelCarTypeCollection|CarModelCarType[] findOrNew($id, array $columns = ['*'])
	 * @method static CarModelCarType first(array|string $columns = ['*'])
	 * @method static CarModelCarType firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static CarModelCarType firstOrCreate(array $attributes, array $values = [])
	 * @method static CarModelCarType firstOrFail(array $columns = ['*'])
	 * @method static CarModelCarType firstOrNew(array $attributes, array $values = [])
	 * @method static CarModelCarType firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static CarModelCarType forceCreate(array $attributes)
	 * @method static _CarModelCarTypeCollection|CarModelCarType[] fromQuery(string $query, array $bindings = [])
	 * @method static _CarModelCarTypeCollection|CarModelCarType[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static CarModelCarType getModel()
	 * @method static CarModelCarType[] getModels(array|string $columns = ['*'])
	 * @method static _CarModelCarTypeQueryBuilder getQuery()
	 * @method static _CarModelCarTypeQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _CarModelCarTypeCollection|CarModelCarType[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _CarModelCarTypeQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _CarModelCarTypeQueryBuilder latest(string $column = null)
	 * @method static _CarModelCarTypeQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CarModelCarTypeQueryBuilder limit(int $value)
	 * @method static CarModelCarType make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static CarModelCarType newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _CarModelCarTypeQueryBuilder offset(int $value)
	 * @method static _CarModelCarTypeQueryBuilder oldest(string $column = null)
	 * @method static _CarModelCarTypeQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _CarModelCarTypeQueryBuilder orderByDesc(string $column)
	 * @method static _CarModelCarTypeQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _CarModelCarTypeQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _CarModelCarTypeQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CarModelCarTypeQueryBuilder select(array $columns = ['*'])
	 * @method static _CarModelCarTypeQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _CarModelCarTypeQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _CarModelCarTypeQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _CarModelCarTypeQueryBuilder take(int $value)
	 * @method static _CarModelCarTypeQueryBuilder tap(callable $callback)
	 * @method static _CarModelCarTypeQueryBuilder truncate()
	 * @method static _CarModelCarTypeQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static CarModelCarType updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _CarModelCarTypeQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _CarModelCarTypeQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelCarTypeQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _CarModelCarTypeQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _CarModelCarTypeQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelCarTypeQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CarModelCarTypeQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CarModelCarTypeQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelCarTypeQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelCarTypeQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelCarTypeQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereKey($id)
	 * @method static _CarModelCarTypeQueryBuilder whereKeyNot($id)
	 * @method static _CarModelCarTypeQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _CarModelCarTypeQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _CarModelCarTypeQueryBuilder with($relations)
	 * @method static _CarModelCarTypeQueryBuilder withCount($relations)
	 * @method static _CarModelCarTypeQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _CarModelCarTypeQueryBuilder without($relations)
	 * @method static _CarModelCarTypeQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _CarModelCarTypeQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class CarModelCarType extends Model
	{
	}

	/**
	 * @property int $id
	 * @property string|null $title_en
	 * @property string|null $title_ru
	 * @property string|null $slug
	 * @property _CarModelCollection|CarModel[] $models
	 * @method BelongsToMany|_CarModelQueryBuilder models()
	 * @method _CarTypeQueryBuilder newModelQuery()
	 * @method _CarTypeQueryBuilder newQuery()
	 * @method static _CarTypeQueryBuilder query()
	 * @method static _CarTypeCollection|CarType[] all()
	 * @method static _CarTypeQueryBuilder whereId($value)
	 * @method static _CarTypeQueryBuilder whereTitleEn($value)
	 * @method static _CarTypeQueryBuilder whereTitleRu($value)
	 * @method static _CarTypeQueryBuilder whereSlug($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static CarType create(array $attributes = [])
	 * @method static _CarTypeQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _CarTypeCollection|CarType[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _CarTypeQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static CarType|null find($id, array $columns = ['*'])
	 * @method static _CarTypeCollection|CarType[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static CarType findOrFail($id, array $columns = ['*'])
	 * @method static _CarTypeCollection|CarType[] findOrNew($id, array $columns = ['*'])
	 * @method static CarType first(array|string $columns = ['*'])
	 * @method static CarType firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static CarType firstOrCreate(array $attributes, array $values = [])
	 * @method static CarType firstOrFail(array $columns = ['*'])
	 * @method static CarType firstOrNew(array $attributes, array $values = [])
	 * @method static CarType firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static CarType forceCreate(array $attributes)
	 * @method static _CarTypeCollection|CarType[] fromQuery(string $query, array $bindings = [])
	 * @method static _CarTypeCollection|CarType[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static CarType getModel()
	 * @method static CarType[] getModels(array|string $columns = ['*'])
	 * @method static _CarTypeQueryBuilder getQuery()
	 * @method static _CarTypeQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _CarTypeCollection|CarType[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _CarTypeQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _CarTypeQueryBuilder latest(string $column = null)
	 * @method static _CarTypeQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CarTypeQueryBuilder limit(int $value)
	 * @method static CarType make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static CarType newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _CarTypeQueryBuilder offset(int $value)
	 * @method static _CarTypeQueryBuilder oldest(string $column = null)
	 * @method static _CarTypeQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _CarTypeQueryBuilder orderByDesc(string $column)
	 * @method static _CarTypeQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _CarTypeQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _CarTypeQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CarTypeQueryBuilder select(array $columns = ['*'])
	 * @method static _CarTypeQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _CarTypeQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _CarTypeQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _CarTypeQueryBuilder take(int $value)
	 * @method static _CarTypeQueryBuilder tap(callable $callback)
	 * @method static _CarTypeQueryBuilder truncate()
	 * @method static _CarTypeQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static CarType updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _CarTypeQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _CarTypeQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarTypeQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _CarTypeQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _CarTypeQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _CarTypeQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CarTypeQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CarTypeQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarTypeQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _CarTypeQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _CarTypeQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereKey($id)
	 * @method static _CarTypeQueryBuilder whereKeyNot($id)
	 * @method static _CarTypeQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _CarTypeQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _CarTypeQueryBuilder with($relations)
	 * @method static _CarTypeQueryBuilder withCount($relations)
	 * @method static _CarTypeQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _CarTypeQueryBuilder without($relations)
	 * @method static _CarTypeQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _CarTypeQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class CarType extends Model
	{
	}

	/**
	 * @property int $id
	 * @property string $title_ru
	 * @property string $title_en
	 * @property string $alias
	 * @property string $city_dative
	 * @property string $opening_hours
	 * @property string $callback_emails
	 * @property string $callback_service_emails
	 * @property string $coordinates
	 * @property string $jivosite_token
	 * @property string|null $open_script
	 * @property string|null $begin_script
	 * @property string|null $end_script
	 * @property int $bitrix_responsible_id
	 * @property Contacts $contacts
	 * @method BelongsTo|_ContactsQueryBuilder contacts()
	 * @method _CityQueryBuilder newModelQuery()
	 * @method _CityQueryBuilder newQuery()
	 * @method static _CityQueryBuilder query()
	 * @method static _CityCollection|City[] all()
	 * @method static _CityQueryBuilder whereId($value)
	 * @method static _CityQueryBuilder whereTitleRu($value)
	 * @method static _CityQueryBuilder whereTitleEn($value)
	 * @method static _CityQueryBuilder whereAlias($value)
	 * @method static _CityQueryBuilder whereCityDative($value)
	 * @method static _CityQueryBuilder whereOpeningHours($value)
	 * @method static _CityQueryBuilder whereCallbackEmails($value)
	 * @method static _CityQueryBuilder whereCallbackServiceEmails($value)
	 * @method static _CityQueryBuilder whereCoordinates($value)
	 * @method static _CityQueryBuilder whereJivositeToken($value)
	 * @method static _CityQueryBuilder whereOpenScript($value)
	 * @method static _CityQueryBuilder whereBeginScript($value)
	 * @method static _CityQueryBuilder whereEndScript($value)
	 * @method static _CityQueryBuilder whereBitrixResponsibleId($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static City create(array $attributes = [])
	 * @method static _CityQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _CityCollection|City[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _CityQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static City|null find($id, array $columns = ['*'])
	 * @method static _CityCollection|City[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static City findOrFail($id, array $columns = ['*'])
	 * @method static _CityCollection|City[] findOrNew($id, array $columns = ['*'])
	 * @method static City first(array|string $columns = ['*'])
	 * @method static City firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static City firstOrCreate(array $attributes, array $values = [])
	 * @method static City firstOrFail(array $columns = ['*'])
	 * @method static City firstOrNew(array $attributes, array $values = [])
	 * @method static City firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static City forceCreate(array $attributes)
	 * @method static _CityCollection|City[] fromQuery(string $query, array $bindings = [])
	 * @method static _CityCollection|City[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static City getModel()
	 * @method static City[] getModels(array|string $columns = ['*'])
	 * @method static _CityQueryBuilder getQuery()
	 * @method static _CityQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _CityCollection|City[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _CityQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _CityQueryBuilder latest(string $column = null)
	 * @method static _CityQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CityQueryBuilder limit(int $value)
	 * @method static City make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static City newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _CityQueryBuilder offset(int $value)
	 * @method static _CityQueryBuilder oldest(string $column = null)
	 * @method static _CityQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _CityQueryBuilder orderByDesc(string $column)
	 * @method static _CityQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _CityQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _CityQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _CityQueryBuilder select(array $columns = ['*'])
	 * @method static _CityQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _CityQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _CityQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _CityQueryBuilder take(int $value)
	 * @method static _CityQueryBuilder tap(callable $callback)
	 * @method static _CityQueryBuilder truncate()
	 * @method static _CityQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static City updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _CityQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _CityQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _CityQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _CityQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _CityQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _CityQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _CityQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CityQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _CityQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _CityQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _CityQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _CityQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereKey($id)
	 * @method static _CityQueryBuilder whereKeyNot($id)
	 * @method static _CityQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _CityQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _CityQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _CityQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _CityQueryBuilder with($relations)
	 * @method static _CityQueryBuilder withCount($relations)
	 * @method static _CityQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _CityQueryBuilder without($relations)
	 * @method static _CityQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _CityQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class City extends Model
	{
	}

	/**
	 * @property int $id
	 * @property int $city_id
	 * @property string|null $address
	 * @property string|null $phone
	 * @property string|null $email
	 * @property string|null $fb_url
	 * @property string|null $instagram_url
	 * @property string|null $vk_url
	 * @property string|null $youtube_url
	 * @property string|null $ok_url
	 * @method _ContactsQueryBuilder newModelQuery()
	 * @method _ContactsQueryBuilder newQuery()
	 * @method static _ContactsQueryBuilder query()
	 * @method static _ContactsCollection|Contacts[] all()
	 * @method static _ContactsQueryBuilder whereId($value)
	 * @method static _ContactsQueryBuilder whereCityId($value)
	 * @method static _ContactsQueryBuilder whereAddress($value)
	 * @method static _ContactsQueryBuilder wherePhone($value)
	 * @method static _ContactsQueryBuilder whereEmail($value)
	 * @method static _ContactsQueryBuilder whereFbUrl($value)
	 * @method static _ContactsQueryBuilder whereInstagramUrl($value)
	 * @method static _ContactsQueryBuilder whereVkUrl($value)
	 * @method static _ContactsQueryBuilder whereYoutubeUrl($value)
	 * @method static _ContactsQueryBuilder whereOkUrl($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Contacts create(array $attributes = [])
	 * @method static _ContactsQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _ContactsCollection|Contacts[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _ContactsQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Contacts|null find($id, array $columns = ['*'])
	 * @method static _ContactsCollection|Contacts[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static Contacts findOrFail($id, array $columns = ['*'])
	 * @method static _ContactsCollection|Contacts[] findOrNew($id, array $columns = ['*'])
	 * @method static Contacts first(array|string $columns = ['*'])
	 * @method static Contacts firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static Contacts firstOrCreate(array $attributes, array $values = [])
	 * @method static Contacts firstOrFail(array $columns = ['*'])
	 * @method static Contacts firstOrNew(array $attributes, array $values = [])
	 * @method static Contacts firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Contacts forceCreate(array $attributes)
	 * @method static _ContactsCollection|Contacts[] fromQuery(string $query, array $bindings = [])
	 * @method static _ContactsCollection|Contacts[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static Contacts getModel()
	 * @method static Contacts[] getModels(array|string $columns = ['*'])
	 * @method static _ContactsQueryBuilder getQuery()
	 * @method static _ContactsQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _ContactsCollection|Contacts[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _ContactsQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _ContactsQueryBuilder latest(string $column = null)
	 * @method static _ContactsQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ContactsQueryBuilder limit(int $value)
	 * @method static Contacts make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static Contacts newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _ContactsQueryBuilder offset(int $value)
	 * @method static _ContactsQueryBuilder oldest(string $column = null)
	 * @method static _ContactsQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _ContactsQueryBuilder orderByDesc(string $column)
	 * @method static _ContactsQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _ContactsQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _ContactsQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _ContactsQueryBuilder select(array $columns = ['*'])
	 * @method static _ContactsQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _ContactsQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _ContactsQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _ContactsQueryBuilder take(int $value)
	 * @method static _ContactsQueryBuilder tap(callable $callback)
	 * @method static _ContactsQueryBuilder truncate()
	 * @method static _ContactsQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Contacts updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _ContactsQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _ContactsQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _ContactsQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _ContactsQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _ContactsQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _ContactsQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ContactsQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _ContactsQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _ContactsQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _ContactsQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _ContactsQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereKey($id)
	 * @method static _ContactsQueryBuilder whereKeyNot($id)
	 * @method static _ContactsQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _ContactsQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _ContactsQueryBuilder with($relations)
	 * @method static _ContactsQueryBuilder withCount($relations)
	 * @method static _ContactsQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _ContactsQueryBuilder without($relations)
	 * @method static _ContactsQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _ContactsQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Contacts extends Model
	{
	}

	/**
	 * @property int $id
	 * @property string $title
	 * @property string $text
	 * @property string $text_short
	 * @property string $preview
	 * @property string $slug
	 * @property string $city_id
	 * @method _NewsQueryBuilder newModelQuery()
	 * @method _NewsQueryBuilder newQuery()
	 * @method static _NewsQueryBuilder query()
	 * @method static _NewsCollection|News[] all()
	 * @method static _NewsQueryBuilder whereId($value)
	 * @method static _NewsQueryBuilder whereTitle($value)
	 * @method static _NewsQueryBuilder whereText($value)
	 * @method static _NewsQueryBuilder whereTextShort($value)
	 * @method static _NewsQueryBuilder wherePreview($value)
	 * @method static _NewsQueryBuilder whereSlug($value)
	 * @method static _NewsQueryBuilder whereCityId($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static News create(array $attributes = [])
	 * @method static _NewsQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _NewsCollection|News[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _NewsQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static News|null find($id, array $columns = ['*'])
	 * @method static _NewsCollection|News[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static News findOrFail($id, array $columns = ['*'])
	 * @method static _NewsCollection|News[] findOrNew($id, array $columns = ['*'])
	 * @method static News first(array|string $columns = ['*'])
	 * @method static News firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static News firstOrCreate(array $attributes, array $values = [])
	 * @method static News firstOrFail(array $columns = ['*'])
	 * @method static News firstOrNew(array $attributes, array $values = [])
	 * @method static News firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static News forceCreate(array $attributes)
	 * @method static _NewsCollection|News[] fromQuery(string $query, array $bindings = [])
	 * @method static _NewsCollection|News[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static News getModel()
	 * @method static News[] getModels(array|string $columns = ['*'])
	 * @method static _NewsQueryBuilder getQuery()
	 * @method static _NewsQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _NewsCollection|News[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _NewsQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _NewsQueryBuilder latest(string $column = null)
	 * @method static _NewsQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _NewsQueryBuilder limit(int $value)
	 * @method static News make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static News newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _NewsQueryBuilder offset(int $value)
	 * @method static _NewsQueryBuilder oldest(string $column = null)
	 * @method static _NewsQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _NewsQueryBuilder orderByDesc(string $column)
	 * @method static _NewsQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _NewsQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _NewsQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _NewsQueryBuilder select(array $columns = ['*'])
	 * @method static _NewsQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _NewsQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _NewsQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _NewsQueryBuilder take(int $value)
	 * @method static _NewsQueryBuilder tap(callable $callback)
	 * @method static _NewsQueryBuilder truncate()
	 * @method static _NewsQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static News updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _NewsQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _NewsQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _NewsQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _NewsQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _NewsQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _NewsQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _NewsQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _NewsQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _NewsQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _NewsQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _NewsQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereKey($id)
	 * @method static _NewsQueryBuilder whereKeyNot($id)
	 * @method static _NewsQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _NewsQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _NewsQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _NewsQueryBuilder with($relations)
	 * @method static _NewsQueryBuilder withCount($relations)
	 * @method static _NewsQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _NewsQueryBuilder without($relations)
	 * @method static _NewsQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _NewsQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class News extends Model
	{
	}

	/**
	 * @property int $id
	 * @property Carbon|null $start_date
	 * @property Carbon|null $end_date
	 * @property Carbon|null $date
	 * @property string|null $img_mobile
	 * @property string|null $img_tablet
	 * @property string|null $img_desktop
	 * @property string|null $title
	 * @property string|null $description
	 * @property int|null $count
	 * @property bool|null $is_active
	 * @property int|null $city_id
	 * @property int|null $car_model_id
	 * @property int|null $car_type_id
	 * @property string|null $utm_tags
	 * @method _RetargetQueryBuilder newModelQuery()
	 * @method _RetargetQueryBuilder newQuery()
	 * @method static _RetargetQueryBuilder query()
	 * @method static _RetargetCollection|Retarget[] all()
	 * @method static _RetargetQueryBuilder whereId($value)
	 * @method static _RetargetQueryBuilder whereStartDate($value)
	 * @method static _RetargetQueryBuilder whereEndDate($value)
	 * @method static _RetargetQueryBuilder whereDate($value)
	 * @method static _RetargetQueryBuilder whereImgMobile($value)
	 * @method static _RetargetQueryBuilder whereImgTablet($value)
	 * @method static _RetargetQueryBuilder whereImgDesktop($value)
	 * @method static _RetargetQueryBuilder whereTitle($value)
	 * @method static _RetargetQueryBuilder whereDescription($value)
	 * @method static _RetargetQueryBuilder whereCount($value)
	 * @method static _RetargetQueryBuilder whereIsActive($value)
	 * @method static _RetargetQueryBuilder whereCityId($value)
	 * @method static _RetargetQueryBuilder whereCarModelId($value)
	 * @method static _RetargetQueryBuilder whereCarTypeId($value)
	 * @method static _RetargetQueryBuilder whereUtmTags($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Retarget create(array $attributes = [])
	 * @method static _RetargetQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _RetargetCollection|Retarget[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _RetargetQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Retarget|null find($id, array $columns = ['*'])
	 * @method static _RetargetCollection|Retarget[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static Retarget findOrFail($id, array $columns = ['*'])
	 * @method static _RetargetCollection|Retarget[] findOrNew($id, array $columns = ['*'])
	 * @method static Retarget first(array|string $columns = ['*'])
	 * @method static Retarget firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static Retarget firstOrCreate(array $attributes, array $values = [])
	 * @method static Retarget firstOrFail(array $columns = ['*'])
	 * @method static Retarget firstOrNew(array $attributes, array $values = [])
	 * @method static Retarget firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Retarget forceCreate(array $attributes)
	 * @method static _RetargetCollection|Retarget[] fromQuery(string $query, array $bindings = [])
	 * @method static _RetargetCollection|Retarget[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static Retarget getModel()
	 * @method static Retarget[] getModels(array|string $columns = ['*'])
	 * @method static _RetargetQueryBuilder getQuery()
	 * @method static _RetargetQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _RetargetCollection|Retarget[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _RetargetQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _RetargetQueryBuilder latest(string $column = null)
	 * @method static _RetargetQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _RetargetQueryBuilder limit(int $value)
	 * @method static Retarget make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static Retarget newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _RetargetQueryBuilder offset(int $value)
	 * @method static _RetargetQueryBuilder oldest(string $column = null)
	 * @method static _RetargetQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _RetargetQueryBuilder orderByDesc(string $column)
	 * @method static _RetargetQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _RetargetQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _RetargetQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _RetargetQueryBuilder select(array $columns = ['*'])
	 * @method static _RetargetQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _RetargetQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _RetargetQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _RetargetQueryBuilder take(int $value)
	 * @method static _RetargetQueryBuilder tap(callable $callback)
	 * @method static _RetargetQueryBuilder truncate()
	 * @method static _RetargetQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Retarget updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _RetargetQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _RetargetQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _RetargetQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _RetargetQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _RetargetQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _RetargetQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _RetargetQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _RetargetQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _RetargetQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _RetargetQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _RetargetQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereKey($id)
	 * @method static _RetargetQueryBuilder whereKeyNot($id)
	 * @method static _RetargetQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _RetargetQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _RetargetQueryBuilder with($relations)
	 * @method static _RetargetQueryBuilder withCount($relations)
	 * @method static _RetargetQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _RetargetQueryBuilder without($relations)
	 * @method static _RetargetQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _RetargetQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Retarget extends Model
	{
	}

	/**
	 * @property int $id
	 * @property string $url
	 * @property string $title
	 * @property string|null $header
	 * @property string|null $description
	 * @property string|null $og_locale
	 * @property string|null $og_type
	 * @property string|null $og_title
	 * @property string|null $og_description
	 * @property string|null $og_url
	 * @property string|null $og_image
	 * @method _SeoQueryBuilder newModelQuery()
	 * @method _SeoQueryBuilder newQuery()
	 * @method static _SeoQueryBuilder query()
	 * @method static _SeoCollection|Seo[] all()
	 * @method static _SeoQueryBuilder whereId($value)
	 * @method static _SeoQueryBuilder whereUrl($value)
	 * @method static _SeoQueryBuilder whereTitle($value)
	 * @method static _SeoQueryBuilder whereHeader($value)
	 * @method static _SeoQueryBuilder whereDescription($value)
	 * @method static _SeoQueryBuilder whereOgLocale($value)
	 * @method static _SeoQueryBuilder whereOgType($value)
	 * @method static _SeoQueryBuilder whereOgTitle($value)
	 * @method static _SeoQueryBuilder whereOgDescription($value)
	 * @method static _SeoQueryBuilder whereOgUrl($value)
	 * @method static _SeoQueryBuilder whereOgImage($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Seo create(array $attributes = [])
	 * @method static _SeoQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _SeoCollection|Seo[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _SeoQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Seo|null find($id, array $columns = ['*'])
	 * @method static _SeoCollection|Seo[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static Seo findOrFail($id, array $columns = ['*'])
	 * @method static _SeoCollection|Seo[] findOrNew($id, array $columns = ['*'])
	 * @method static Seo first(array|string $columns = ['*'])
	 * @method static Seo firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static Seo firstOrCreate(array $attributes, array $values = [])
	 * @method static Seo firstOrFail(array $columns = ['*'])
	 * @method static Seo firstOrNew(array $attributes, array $values = [])
	 * @method static Seo firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Seo forceCreate(array $attributes)
	 * @method static _SeoCollection|Seo[] fromQuery(string $query, array $bindings = [])
	 * @method static _SeoCollection|Seo[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static Seo getModel()
	 * @method static Seo[] getModels(array|string $columns = ['*'])
	 * @method static _SeoQueryBuilder getQuery()
	 * @method static _SeoQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _SeoCollection|Seo[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _SeoQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _SeoQueryBuilder latest(string $column = null)
	 * @method static _SeoQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _SeoQueryBuilder limit(int $value)
	 * @method static Seo make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static Seo newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _SeoQueryBuilder offset(int $value)
	 * @method static _SeoQueryBuilder oldest(string $column = null)
	 * @method static _SeoQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _SeoQueryBuilder orderByDesc(string $column)
	 * @method static _SeoQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _SeoQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _SeoQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _SeoQueryBuilder select(array $columns = ['*'])
	 * @method static _SeoQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _SeoQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _SeoQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _SeoQueryBuilder take(int $value)
	 * @method static _SeoQueryBuilder tap(callable $callback)
	 * @method static _SeoQueryBuilder truncate()
	 * @method static _SeoQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Seo updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _SeoQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _SeoQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _SeoQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _SeoQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _SeoQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _SeoQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _SeoQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _SeoQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _SeoQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _SeoQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _SeoQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereKey($id)
	 * @method static _SeoQueryBuilder whereKeyNot($id)
	 * @method static _SeoQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _SeoQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _SeoQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _SeoQueryBuilder with($relations)
	 * @method static _SeoQueryBuilder withCount($relations)
	 * @method static _SeoQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _SeoQueryBuilder without($relations)
	 * @method static _SeoQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _SeoQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Seo extends Model
	{
	}

	/**
	 * @property int $id
	 * @property string $title
	 * @property string $text
	 * @property string $text_short
	 * @property string $preview
	 * @property string $slug
	 * @property string $city_id
	 * @property int|null $sort
	 * @method _StocksQueryBuilder newModelQuery()
	 * @method _StocksQueryBuilder newQuery()
	 * @method static _StocksQueryBuilder query()
	 * @method static _StocksCollection|Stocks[] all()
	 * @method static _StocksQueryBuilder whereId($value)
	 * @method static _StocksQueryBuilder whereTitle($value)
	 * @method static _StocksQueryBuilder whereText($value)
	 * @method static _StocksQueryBuilder whereTextShort($value)
	 * @method static _StocksQueryBuilder wherePreview($value)
	 * @method static _StocksQueryBuilder whereSlug($value)
	 * @method static _StocksQueryBuilder whereCityId($value)
	 * @method static _StocksQueryBuilder whereSort($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Stocks create(array $attributes = [])
	 * @method static _StocksQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _StocksCollection|Stocks[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _StocksQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Stocks|null find($id, array $columns = ['*'])
	 * @method static _StocksCollection|Stocks[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static Stocks findOrFail($id, array $columns = ['*'])
	 * @method static _StocksCollection|Stocks[] findOrNew($id, array $columns = ['*'])
	 * @method static Stocks first(array|string $columns = ['*'])
	 * @method static Stocks firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static Stocks firstOrCreate(array $attributes, array $values = [])
	 * @method static Stocks firstOrFail(array $columns = ['*'])
	 * @method static Stocks firstOrNew(array $attributes, array $values = [])
	 * @method static Stocks firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Stocks forceCreate(array $attributes)
	 * @method static _StocksCollection|Stocks[] fromQuery(string $query, array $bindings = [])
	 * @method static _StocksCollection|Stocks[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static Stocks getModel()
	 * @method static Stocks[] getModels(array|string $columns = ['*'])
	 * @method static _StocksQueryBuilder getQuery()
	 * @method static _StocksQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _StocksCollection|Stocks[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _StocksQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _StocksQueryBuilder latest(string $column = null)
	 * @method static _StocksQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _StocksQueryBuilder limit(int $value)
	 * @method static Stocks make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static Stocks newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _StocksQueryBuilder offset(int $value)
	 * @method static _StocksQueryBuilder oldest(string $column = null)
	 * @method static _StocksQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _StocksQueryBuilder orderByDesc(string $column)
	 * @method static _StocksQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _StocksQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _StocksQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _StocksQueryBuilder select(array $columns = ['*'])
	 * @method static _StocksQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _StocksQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _StocksQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _StocksQueryBuilder take(int $value)
	 * @method static _StocksQueryBuilder tap(callable $callback)
	 * @method static _StocksQueryBuilder truncate()
	 * @method static _StocksQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Stocks updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _StocksQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _StocksQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _StocksQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _StocksQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _StocksQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _StocksQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _StocksQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _StocksQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _StocksQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _StocksQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _StocksQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereKey($id)
	 * @method static _StocksQueryBuilder whereKeyNot($id)
	 * @method static _StocksQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _StocksQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _StocksQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _StocksQueryBuilder with($relations)
	 * @method static _StocksQueryBuilder withCount($relations)
	 * @method static _StocksQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _StocksQueryBuilder without($relations)
	 * @method static _StocksQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _StocksQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Stocks extends Model
	{
	}

	/**
	 * @property int $id
	 * @property string $name
	 * @property string $email
	 * @property Carbon|null $email_verified_at
	 * @property string $password
	 * @property string|null $remember_token
	 * @property Carbon|null $created_at
	 * @property Carbon|null $updated_at
	 * @property _DatabaseNotificationCollection|DatabaseNotification[] $notifications
	 * @method MorphToMany|_DatabaseNotificationQueryBuilder notifications()
	 * @method _UserQueryBuilder newModelQuery()
	 * @method _UserQueryBuilder newQuery()
	 * @method static _UserQueryBuilder query()
	 * @method static _UserCollection|User[] all()
	 * @method static _UserQueryBuilder whereId($value)
	 * @method static _UserQueryBuilder whereName($value)
	 * @method static _UserQueryBuilder whereEmail($value)
	 * @method static _UserQueryBuilder whereEmailVerifiedAt($value)
	 * @method static _UserQueryBuilder wherePassword($value)
	 * @method static _UserQueryBuilder whereRememberToken($value)
	 * @method static _UserQueryBuilder whereCreatedAt($value)
	 * @method static _UserQueryBuilder whereUpdatedAt($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static User create(array $attributes = [])
	 * @method static _UserQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _UserCollection|User[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _UserQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static User|null find($id, array $columns = ['*'])
	 * @method static _UserCollection|User[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static User findOrFail($id, array $columns = ['*'])
	 * @method static _UserCollection|User[] findOrNew($id, array $columns = ['*'])
	 * @method static User first(array|string $columns = ['*'])
	 * @method static User firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static User firstOrCreate(array $attributes, array $values = [])
	 * @method static User firstOrFail(array $columns = ['*'])
	 * @method static User firstOrNew(array $attributes, array $values = [])
	 * @method static User firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static User forceCreate(array $attributes)
	 * @method static _UserCollection|User[] fromQuery(string $query, array $bindings = [])
	 * @method static _UserCollection|User[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static User getModel()
	 * @method static User[] getModels(array|string $columns = ['*'])
	 * @method static _UserQueryBuilder getQuery()
	 * @method static _UserQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _UserCollection|User[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _UserQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _UserQueryBuilder latest(string $column = null)
	 * @method static _UserQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _UserQueryBuilder limit(int $value)
	 * @method static User make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static User newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _UserQueryBuilder offset(int $value)
	 * @method static _UserQueryBuilder oldest(string $column = null)
	 * @method static _UserQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _UserQueryBuilder orderByDesc(string $column)
	 * @method static _UserQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _UserQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _UserQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _UserQueryBuilder select(array $columns = ['*'])
	 * @method static _UserQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _UserQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _UserQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _UserQueryBuilder take(int $value)
	 * @method static _UserQueryBuilder tap(callable $callback)
	 * @method static _UserQueryBuilder truncate()
	 * @method static _UserQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static User updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _UserQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _UserQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _UserQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _UserQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _UserQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _UserQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _UserQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereKey($id)
	 * @method static _UserQueryBuilder whereKeyNot($id)
	 * @method static _UserQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _UserQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _UserQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _UserQueryBuilder with($relations)
	 * @method static _UserQueryBuilder withCount($relations)
	 * @method static _UserQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _UserQueryBuilder without($relations)
	 * @method static _UserQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _UserQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class User extends Model
	{
	}
}

namespace Cviebrock\EloquentSluggable\Tests\Models {

	use Illuminate\Contracts\Support\Arrayable;
	use Illuminate\Database\Eloquent\Model;
	use Illuminate\Database\Eloquent\Relations\BelongsTo;
	use Illuminate\Database\Eloquent\Scope;
	use Illuminate\Support\Carbon;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_AuthorCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_AuthorQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostNotSluggableCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostNotSluggableQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostShortConfigCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostShortConfigQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostShortConfigWithScopeHelpersCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostShortConfigWithScopeHelpersQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomCallableMethodCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomCallableMethodQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomEngine2Collection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomEngine2QueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomEngineCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomEngineQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomMethodCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomMethodQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomSeparatorCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomSeparatorQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomSourceCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomSourceQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomSuffixCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithCustomSuffixQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithEmptySeparatorCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithEmptySeparatorQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithForeignRulesetCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithForeignRulesetQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithIncludeTrashedCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithIncludeTrashedQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMaxLengthCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMaxLengthQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMaxLengthSplitWordsCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMaxLengthSplitWordsQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMultipleSlugsAndCustomSlugKeyCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMultipleSlugsAndHelperTraitCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMultipleSlugsAndHelperTraitQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMultipleSlugsCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMultipleSlugsQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMultipleSourcesCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithMultipleSourcesQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithNoSourceCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithNoSourceQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithOnUpdateCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithOnUpdateQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithRelationCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithRelationQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithReservedSlugCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithReservedSlugQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithSoftDeletingCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithSoftDeletingIncludeTrashedCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithSoftDeletingIncludeTrashedQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithSoftDeletingQueryBuilder;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithUniqueSlugConstraintsCollection;
	use LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models\_PostWithUniqueSlugConstraintsQueryBuilder;

	/**
	 * @property int $id
	 * @property string $name
	 * @method _AuthorQueryBuilder newModelQuery()
	 * @method _AuthorQueryBuilder newQuery()
	 * @method static _AuthorQueryBuilder query()
	 * @method static _AuthorCollection|Author[] all()
	 * @method static _AuthorQueryBuilder whereId($value)
	 * @method static _AuthorQueryBuilder whereName($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Author create(array $attributes = [])
	 * @method static _AuthorQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _AuthorCollection|Author[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _AuthorQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Author|null find($id, array $columns = ['*'])
	 * @method static _AuthorCollection|Author[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static Author findOrFail($id, array $columns = ['*'])
	 * @method static _AuthorCollection|Author[] findOrNew($id, array $columns = ['*'])
	 * @method static Author first(array|string $columns = ['*'])
	 * @method static Author firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static Author firstOrCreate(array $attributes, array $values = [])
	 * @method static Author firstOrFail(array $columns = ['*'])
	 * @method static Author firstOrNew(array $attributes, array $values = [])
	 * @method static Author firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Author forceCreate(array $attributes)
	 * @method static _AuthorCollection|Author[] fromQuery(string $query, array $bindings = [])
	 * @method static _AuthorCollection|Author[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static Author getModel()
	 * @method static Author[] getModels(array|string $columns = ['*'])
	 * @method static _AuthorQueryBuilder getQuery()
	 * @method static _AuthorQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _AuthorCollection|Author[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _AuthorQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _AuthorQueryBuilder latest(string $column = null)
	 * @method static _AuthorQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _AuthorQueryBuilder limit(int $value)
	 * @method static Author make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static Author newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _AuthorQueryBuilder offset(int $value)
	 * @method static _AuthorQueryBuilder oldest(string $column = null)
	 * @method static _AuthorQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _AuthorQueryBuilder orderByDesc(string $column)
	 * @method static _AuthorQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _AuthorQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _AuthorQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _AuthorQueryBuilder select(array $columns = ['*'])
	 * @method static _AuthorQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _AuthorQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _AuthorQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _AuthorQueryBuilder take(int $value)
	 * @method static _AuthorQueryBuilder tap(callable $callback)
	 * @method static _AuthorQueryBuilder truncate()
	 * @method static _AuthorQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Author updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _AuthorQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _AuthorQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _AuthorQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _AuthorQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _AuthorQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _AuthorQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _AuthorQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _AuthorQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _AuthorQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _AuthorQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _AuthorQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereKey($id)
	 * @method static _AuthorQueryBuilder whereKeyNot($id)
	 * @method static _AuthorQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _AuthorQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _AuthorQueryBuilder with($relations)
	 * @method static _AuthorQueryBuilder withCount($relations)
	 * @method static _AuthorQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _AuthorQueryBuilder without($relations)
	 * @method static _AuthorQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _AuthorQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class Author extends Model
	{
	}

	/**
	 * @property int $id
	 * @property string $title
	 * @property string|null $subtitle
	 * @property string|null $slug
	 * @property string|null $dummy
	 * @property int|null $author_id
	 * @property Carbon|null $deleted_at
	 * @method _PostQueryBuilder newModelQuery()
	 * @method _PostQueryBuilder newQuery()
	 * @method static _PostQueryBuilder query()
	 * @method static _PostCollection|Post[] all()
	 * @method static _PostQueryBuilder whereId($value)
	 * @method static _PostQueryBuilder whereTitle($value)
	 * @method static _PostQueryBuilder whereSubtitle($value)
	 * @method static _PostQueryBuilder whereSlug($value)
	 * @method static _PostQueryBuilder whereDummy($value)
	 * @method static _PostQueryBuilder whereAuthorId($value)
	 * @method static _PostQueryBuilder whereDeletedAt($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static Post create(array $attributes = [])
	 * @method static _PostQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostCollection|Post[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static Post|null find($id, array $columns = ['*'])
	 * @method static _PostCollection|Post[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static Post findOrFail($id, array $columns = ['*'])
	 * @method static _PostCollection|Post[] findOrNew($id, array $columns = ['*'])
	 * @method static Post first(array|string $columns = ['*'])
	 * @method static Post firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static Post firstOrCreate(array $attributes, array $values = [])
	 * @method static Post firstOrFail(array $columns = ['*'])
	 * @method static Post firstOrNew(array $attributes, array $values = [])
	 * @method static Post firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static Post forceCreate(array $attributes)
	 * @method static _PostCollection|Post[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostCollection|Post[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static Post getModel()
	 * @method static Post[] getModels(array|string $columns = ['*'])
	 * @method static _PostQueryBuilder getQuery()
	 * @method static _PostQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostCollection|Post[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostQueryBuilder latest(string $column = null)
	 * @method static _PostQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostQueryBuilder limit(int $value)
	 * @method static Post make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static Post newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostQueryBuilder offset(int $value)
	 * @method static _PostQueryBuilder oldest(string $column = null)
	 * @method static _PostQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostQueryBuilder orderByDesc(string $column)
	 * @method static _PostQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostQueryBuilder select(array $columns = ['*'])
	 * @method static _PostQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostQueryBuilder take(int $value)
	 * @method static _PostQueryBuilder tap(callable $callback)
	 * @method static _PostQueryBuilder truncate()
	 * @method static _PostQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static Post updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereKey($id)
	 * @method static _PostQueryBuilder whereKeyNot($id)
	 * @method static _PostQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostQueryBuilder with($relations)
	 * @method static _PostQueryBuilder withCount($relations)
	 * @method static _PostQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostQueryBuilder without($relations)
	 * @method static _PostQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class Post extends Model
	{
	}

	/**
	 * @property int $id
	 * @property string $title
	 * @property string|null $subtitle
	 * @property string|null $slug
	 * @property string|null $dummy
	 * @property int|null $author_id
	 * @property Carbon|null $deleted_at
	 * @method _PostNotSluggableQueryBuilder newModelQuery()
	 * @method _PostNotSluggableQueryBuilder newQuery()
	 * @method static _PostNotSluggableQueryBuilder query()
	 * @method static _PostNotSluggableCollection|PostNotSluggable[] all()
	 * @method static _PostNotSluggableQueryBuilder whereId($value)
	 * @method static _PostNotSluggableQueryBuilder whereTitle($value)
	 * @method static _PostNotSluggableQueryBuilder whereSubtitle($value)
	 * @method static _PostNotSluggableQueryBuilder whereSlug($value)
	 * @method static _PostNotSluggableQueryBuilder whereDummy($value)
	 * @method static _PostNotSluggableQueryBuilder whereAuthorId($value)
	 * @method static _PostNotSluggableQueryBuilder whereDeletedAt($value)
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostNotSluggable create(array $attributes = [])
	 * @method static _PostNotSluggableQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostNotSluggableCollection|PostNotSluggable[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostNotSluggableQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostNotSluggable|null find($id, array $columns = ['*'])
	 * @method static _PostNotSluggableCollection|PostNotSluggable[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostNotSluggable findOrFail($id, array $columns = ['*'])
	 * @method static _PostNotSluggableCollection|PostNotSluggable[] findOrNew($id, array $columns = ['*'])
	 * @method static PostNotSluggable first(array|string $columns = ['*'])
	 * @method static PostNotSluggable firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostNotSluggable firstOrCreate(array $attributes, array $values = [])
	 * @method static PostNotSluggable firstOrFail(array $columns = ['*'])
	 * @method static PostNotSluggable firstOrNew(array $attributes, array $values = [])
	 * @method static PostNotSluggable firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostNotSluggable forceCreate(array $attributes)
	 * @method static _PostNotSluggableCollection|PostNotSluggable[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostNotSluggableCollection|PostNotSluggable[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostNotSluggable getModel()
	 * @method static PostNotSluggable[] getModels(array|string $columns = ['*'])
	 * @method static _PostNotSluggableQueryBuilder getQuery()
	 * @method static _PostNotSluggableQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostNotSluggableCollection|PostNotSluggable[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostNotSluggableQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostNotSluggableQueryBuilder latest(string $column = null)
	 * @method static _PostNotSluggableQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostNotSluggableQueryBuilder limit(int $value)
	 * @method static PostNotSluggable make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostNotSluggable newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostNotSluggableQueryBuilder offset(int $value)
	 * @method static _PostNotSluggableQueryBuilder oldest(string $column = null)
	 * @method static _PostNotSluggableQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostNotSluggableQueryBuilder orderByDesc(string $column)
	 * @method static _PostNotSluggableQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostNotSluggableQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostNotSluggableQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostNotSluggableQueryBuilder select(array $columns = ['*'])
	 * @method static _PostNotSluggableQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostNotSluggableQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostNotSluggableQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostNotSluggableQueryBuilder take(int $value)
	 * @method static _PostNotSluggableQueryBuilder tap(callable $callback)
	 * @method static _PostNotSluggableQueryBuilder truncate()
	 * @method static _PostNotSluggableQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostNotSluggable updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostNotSluggableQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostNotSluggableQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostNotSluggableQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostNotSluggableQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostNotSluggableQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostNotSluggableQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostNotSluggableQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostNotSluggableQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostNotSluggableQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostNotSluggableQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostNotSluggableQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereKey($id)
	 * @method static _PostNotSluggableQueryBuilder whereKeyNot($id)
	 * @method static _PostNotSluggableQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostNotSluggableQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostNotSluggableQueryBuilder with($relations)
	 * @method static _PostNotSluggableQueryBuilder withCount($relations)
	 * @method static _PostNotSluggableQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostNotSluggableQueryBuilder without($relations)
	 * @method static _PostNotSluggableQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostNotSluggableQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class PostNotSluggable extends Model
	{
	}

	/**
	 * @method _PostShortConfigQueryBuilder newModelQuery()
	 * @method _PostShortConfigQueryBuilder newQuery()
	 * @method static _PostShortConfigQueryBuilder query()
	 * @method static _PostShortConfigCollection|PostShortConfig[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostShortConfig create(array $attributes = [])
	 * @method static _PostShortConfigQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostShortConfigCollection|PostShortConfig[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostShortConfigQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostShortConfig|null find($id, array $columns = ['*'])
	 * @method static _PostShortConfigCollection|PostShortConfig[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostShortConfig findOrFail($id, array $columns = ['*'])
	 * @method static _PostShortConfigCollection|PostShortConfig[] findOrNew($id, array $columns = ['*'])
	 * @method static PostShortConfig first(array|string $columns = ['*'])
	 * @method static PostShortConfig firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostShortConfig firstOrCreate(array $attributes, array $values = [])
	 * @method static PostShortConfig firstOrFail(array $columns = ['*'])
	 * @method static PostShortConfig firstOrNew(array $attributes, array $values = [])
	 * @method static PostShortConfig firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostShortConfig forceCreate(array $attributes)
	 * @method static _PostShortConfigCollection|PostShortConfig[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostShortConfigCollection|PostShortConfig[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostShortConfig getModel()
	 * @method static PostShortConfig[] getModels(array|string $columns = ['*'])
	 * @method static _PostShortConfigQueryBuilder getQuery()
	 * @method static _PostShortConfigQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostShortConfigCollection|PostShortConfig[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostShortConfigQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostShortConfigQueryBuilder latest(string $column = null)
	 * @method static _PostShortConfigQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostShortConfigQueryBuilder limit(int $value)
	 * @method static PostShortConfig make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostShortConfig newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostShortConfigQueryBuilder offset(int $value)
	 * @method static _PostShortConfigQueryBuilder oldest(string $column = null)
	 * @method static _PostShortConfigQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostShortConfigQueryBuilder orderByDesc(string $column)
	 * @method static _PostShortConfigQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostShortConfigQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostShortConfigQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostShortConfigQueryBuilder select(array $columns = ['*'])
	 * @method static _PostShortConfigQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostShortConfigQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostShortConfigQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostShortConfigQueryBuilder take(int $value)
	 * @method static _PostShortConfigQueryBuilder tap(callable $callback)
	 * @method static _PostShortConfigQueryBuilder truncate()
	 * @method static _PostShortConfigQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostShortConfig updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostShortConfigQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostShortConfigQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostShortConfigQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostShortConfigQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostShortConfigQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostShortConfigQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereKey($id)
	 * @method static _PostShortConfigQueryBuilder whereKeyNot($id)
	 * @method static _PostShortConfigQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigQueryBuilder with($relations)
	 * @method static _PostShortConfigQueryBuilder withCount($relations)
	 * @method static _PostShortConfigQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostShortConfigQueryBuilder without($relations)
	 * @method static _PostShortConfigQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostShortConfigQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostShortConfigQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostShortConfig extends Model
	{
	}

	/**
	 * @method _PostShortConfigWithScopeHelpersQueryBuilder newModelQuery()
	 * @method _PostShortConfigWithScopeHelpersQueryBuilder newQuery()
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder query()
	 * @method static _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostShortConfigWithScopeHelpers create(array $attributes = [])
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostShortConfigWithScopeHelpers|null find($id, array $columns = ['*'])
	 * @method static _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostShortConfigWithScopeHelpers findOrFail($id, array $columns = ['*'])
	 * @method static _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] findOrNew($id, array $columns = ['*'])
	 * @method static PostShortConfigWithScopeHelpers first(array|string $columns = ['*'])
	 * @method static PostShortConfigWithScopeHelpers firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostShortConfigWithScopeHelpers firstOrCreate(array $attributes, array $values = [])
	 * @method static PostShortConfigWithScopeHelpers firstOrFail(array $columns = ['*'])
	 * @method static PostShortConfigWithScopeHelpers firstOrNew(array $attributes, array $values = [])
	 * @method static PostShortConfigWithScopeHelpers firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostShortConfigWithScopeHelpers forceCreate(array $attributes)
	 * @method static _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostShortConfigWithScopeHelpers getModel()
	 * @method static PostShortConfigWithScopeHelpers[] getModels(array|string $columns = ['*'])
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder getQuery()
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder latest(string $column = null)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder limit(int $value)
	 * @method static PostShortConfigWithScopeHelpers make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostShortConfigWithScopeHelpers newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder offset(int $value)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder oldest(string $column = null)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder orderByDesc(string $column)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder select(array $columns = ['*'])
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder take(int $value)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder tap(callable $callback)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder truncate()
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostShortConfigWithScopeHelpers updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereKey($id)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereKeyNot($id)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder with($relations)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder withCount($relations)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder without($relations)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 * @method static _PostShortConfigWithScopeHelpersQueryBuilder whereSlug(string $slug)
	 */
	class PostShortConfigWithScopeHelpers extends Model
	{
	}

	/**
	 * @method _PostWithCustomCallableMethodQueryBuilder newModelQuery()
	 * @method _PostWithCustomCallableMethodQueryBuilder newQuery()
	 * @method static _PostWithCustomCallableMethodQueryBuilder query()
	 * @method static _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithCustomCallableMethod create(array $attributes = [])
	 * @method static _PostWithCustomCallableMethodQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithCustomCallableMethodQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithCustomCallableMethod|null find($id, array $columns = ['*'])
	 * @method static _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithCustomCallableMethod findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithCustomCallableMethod first(array|string $columns = ['*'])
	 * @method static PostWithCustomCallableMethod firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithCustomCallableMethod firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithCustomCallableMethod firstOrFail(array $columns = ['*'])
	 * @method static PostWithCustomCallableMethod firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithCustomCallableMethod firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithCustomCallableMethod forceCreate(array $attributes)
	 * @method static _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithCustomCallableMethod getModel()
	 * @method static PostWithCustomCallableMethod[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithCustomCallableMethodQueryBuilder getQuery()
	 * @method static _PostWithCustomCallableMethodQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithCustomCallableMethodQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithCustomCallableMethodQueryBuilder latest(string $column = null)
	 * @method static _PostWithCustomCallableMethodQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomCallableMethodQueryBuilder limit(int $value)
	 * @method static PostWithCustomCallableMethod make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithCustomCallableMethod newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithCustomCallableMethodQueryBuilder offset(int $value)
	 * @method static _PostWithCustomCallableMethodQueryBuilder oldest(string $column = null)
	 * @method static _PostWithCustomCallableMethodQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithCustomCallableMethodQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithCustomCallableMethodQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithCustomCallableMethodQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomCallableMethodQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomCallableMethodQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithCustomCallableMethodQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithCustomCallableMethodQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomCallableMethodQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithCustomCallableMethodQueryBuilder take(int $value)
	 * @method static _PostWithCustomCallableMethodQueryBuilder tap(callable $callback)
	 * @method static _PostWithCustomCallableMethodQueryBuilder truncate()
	 * @method static _PostWithCustomCallableMethodQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithCustomCallableMethod updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithCustomCallableMethodQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithCustomCallableMethodQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereKey($id)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereKeyNot($id)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomCallableMethodQueryBuilder with($relations)
	 * @method static _PostWithCustomCallableMethodQueryBuilder withCount($relations)
	 * @method static _PostWithCustomCallableMethodQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithCustomCallableMethodQueryBuilder without($relations)
	 * @method static _PostWithCustomCallableMethodQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithCustomCallableMethodQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithCustomCallableMethodQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithCustomCallableMethod extends Model
	{
	}

	/**
	 * @method _PostWithCustomEngineQueryBuilder newModelQuery()
	 * @method _PostWithCustomEngineQueryBuilder newQuery()
	 * @method static _PostWithCustomEngineQueryBuilder query()
	 * @method static _PostWithCustomEngineCollection|PostWithCustomEngine[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithCustomEngine create(array $attributes = [])
	 * @method static _PostWithCustomEngineQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomEngineCollection|PostWithCustomEngine[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithCustomEngineQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithCustomEngine|null find($id, array $columns = ['*'])
	 * @method static _PostWithCustomEngineCollection|PostWithCustomEngine[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithCustomEngine findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithCustomEngineCollection|PostWithCustomEngine[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithCustomEngine first(array|string $columns = ['*'])
	 * @method static PostWithCustomEngine firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithCustomEngine firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithCustomEngine firstOrFail(array $columns = ['*'])
	 * @method static PostWithCustomEngine firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithCustomEngine firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithCustomEngine forceCreate(array $attributes)
	 * @method static _PostWithCustomEngineCollection|PostWithCustomEngine[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithCustomEngineCollection|PostWithCustomEngine[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithCustomEngine getModel()
	 * @method static PostWithCustomEngine[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithCustomEngineQueryBuilder getQuery()
	 * @method static _PostWithCustomEngineQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithCustomEngineCollection|PostWithCustomEngine[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithCustomEngineQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithCustomEngineQueryBuilder latest(string $column = null)
	 * @method static _PostWithCustomEngineQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomEngineQueryBuilder limit(int $value)
	 * @method static PostWithCustomEngine make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithCustomEngine newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithCustomEngineQueryBuilder offset(int $value)
	 * @method static _PostWithCustomEngineQueryBuilder oldest(string $column = null)
	 * @method static _PostWithCustomEngineQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithCustomEngineQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithCustomEngineQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithCustomEngineQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomEngineQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomEngineQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithCustomEngineQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithCustomEngineQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomEngineQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithCustomEngineQueryBuilder take(int $value)
	 * @method static _PostWithCustomEngineQueryBuilder tap(callable $callback)
	 * @method static _PostWithCustomEngineQueryBuilder truncate()
	 * @method static _PostWithCustomEngineQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithCustomEngine updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithCustomEngineQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithCustomEngineQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngineQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithCustomEngineQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithCustomEngineQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngineQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomEngineQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomEngineQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngineQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngineQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngineQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereKey($id)
	 * @method static _PostWithCustomEngineQueryBuilder whereKeyNot($id)
	 * @method static _PostWithCustomEngineQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngineQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngineQueryBuilder with($relations)
	 * @method static _PostWithCustomEngineQueryBuilder withCount($relations)
	 * @method static _PostWithCustomEngineQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithCustomEngineQueryBuilder without($relations)
	 * @method static _PostWithCustomEngineQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithCustomEngineQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithCustomEngineQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithCustomEngine extends Model
	{
	}

	/**
	 * @method _PostWithCustomEngine2QueryBuilder newModelQuery()
	 * @method _PostWithCustomEngine2QueryBuilder newQuery()
	 * @method static _PostWithCustomEngine2QueryBuilder query()
	 * @method static _PostWithCustomEngine2Collection|PostWithCustomEngine2[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithCustomEngine2 create(array $attributes = [])
	 * @method static _PostWithCustomEngine2QueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomEngine2Collection|PostWithCustomEngine2[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithCustomEngine2QueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithCustomEngine2|null find($id, array $columns = ['*'])
	 * @method static _PostWithCustomEngine2Collection|PostWithCustomEngine2[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithCustomEngine2 findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithCustomEngine2Collection|PostWithCustomEngine2[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithCustomEngine2 first(array|string $columns = ['*'])
	 * @method static PostWithCustomEngine2 firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithCustomEngine2 firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithCustomEngine2 firstOrFail(array $columns = ['*'])
	 * @method static PostWithCustomEngine2 firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithCustomEngine2 firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithCustomEngine2 forceCreate(array $attributes)
	 * @method static _PostWithCustomEngine2Collection|PostWithCustomEngine2[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithCustomEngine2Collection|PostWithCustomEngine2[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithCustomEngine2 getModel()
	 * @method static PostWithCustomEngine2[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithCustomEngine2QueryBuilder getQuery()
	 * @method static _PostWithCustomEngine2QueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithCustomEngine2Collection|PostWithCustomEngine2[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithCustomEngine2QueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithCustomEngine2QueryBuilder latest(string $column = null)
	 * @method static _PostWithCustomEngine2QueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomEngine2QueryBuilder limit(int $value)
	 * @method static PostWithCustomEngine2 make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithCustomEngine2 newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithCustomEngine2QueryBuilder offset(int $value)
	 * @method static _PostWithCustomEngine2QueryBuilder oldest(string $column = null)
	 * @method static _PostWithCustomEngine2QueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithCustomEngine2QueryBuilder orderByDesc(string $column)
	 * @method static _PostWithCustomEngine2QueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithCustomEngine2QueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomEngine2QueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomEngine2QueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithCustomEngine2QueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithCustomEngine2QueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomEngine2QueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithCustomEngine2QueryBuilder take(int $value)
	 * @method static _PostWithCustomEngine2QueryBuilder tap(callable $callback)
	 * @method static _PostWithCustomEngine2QueryBuilder truncate()
	 * @method static _PostWithCustomEngine2QueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithCustomEngine2 updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithCustomEngine2QueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithCustomEngine2QueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngine2QueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithCustomEngine2QueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithCustomEngine2QueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngine2QueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomEngine2QueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomEngine2QueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngine2QueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngine2QueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngine2QueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereKey($id)
	 * @method static _PostWithCustomEngine2QueryBuilder whereKeyNot($id)
	 * @method static _PostWithCustomEngine2QueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomEngine2QueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomEngine2QueryBuilder with($relations)
	 * @method static _PostWithCustomEngine2QueryBuilder withCount($relations)
	 * @method static _PostWithCustomEngine2QueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithCustomEngine2QueryBuilder without($relations)
	 * @method static _PostWithCustomEngine2QueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithCustomEngine2QueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithCustomEngine2QueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithCustomEngine2 extends Model
	{
	}

	/**
	 * @method _PostWithCustomMethodQueryBuilder newModelQuery()
	 * @method _PostWithCustomMethodQueryBuilder newQuery()
	 * @method static _PostWithCustomMethodQueryBuilder query()
	 * @method static _PostWithCustomMethodCollection|PostWithCustomMethod[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithCustomMethod create(array $attributes = [])
	 * @method static _PostWithCustomMethodQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomMethodCollection|PostWithCustomMethod[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithCustomMethodQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithCustomMethod|null find($id, array $columns = ['*'])
	 * @method static _PostWithCustomMethodCollection|PostWithCustomMethod[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithCustomMethod findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithCustomMethodCollection|PostWithCustomMethod[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithCustomMethod first(array|string $columns = ['*'])
	 * @method static PostWithCustomMethod firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithCustomMethod firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithCustomMethod firstOrFail(array $columns = ['*'])
	 * @method static PostWithCustomMethod firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithCustomMethod firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithCustomMethod forceCreate(array $attributes)
	 * @method static _PostWithCustomMethodCollection|PostWithCustomMethod[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithCustomMethodCollection|PostWithCustomMethod[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithCustomMethod getModel()
	 * @method static PostWithCustomMethod[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithCustomMethodQueryBuilder getQuery()
	 * @method static _PostWithCustomMethodQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithCustomMethodCollection|PostWithCustomMethod[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithCustomMethodQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithCustomMethodQueryBuilder latest(string $column = null)
	 * @method static _PostWithCustomMethodQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomMethodQueryBuilder limit(int $value)
	 * @method static PostWithCustomMethod make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithCustomMethod newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithCustomMethodQueryBuilder offset(int $value)
	 * @method static _PostWithCustomMethodQueryBuilder oldest(string $column = null)
	 * @method static _PostWithCustomMethodQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithCustomMethodQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithCustomMethodQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithCustomMethodQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomMethodQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomMethodQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithCustomMethodQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithCustomMethodQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomMethodQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithCustomMethodQueryBuilder take(int $value)
	 * @method static _PostWithCustomMethodQueryBuilder tap(callable $callback)
	 * @method static _PostWithCustomMethodQueryBuilder truncate()
	 * @method static _PostWithCustomMethodQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithCustomMethod updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithCustomMethodQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithCustomMethodQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomMethodQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithCustomMethodQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithCustomMethodQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomMethodQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomMethodQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomMethodQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomMethodQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomMethodQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomMethodQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereKey($id)
	 * @method static _PostWithCustomMethodQueryBuilder whereKeyNot($id)
	 * @method static _PostWithCustomMethodQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomMethodQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomMethodQueryBuilder with($relations)
	 * @method static _PostWithCustomMethodQueryBuilder withCount($relations)
	 * @method static _PostWithCustomMethodQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithCustomMethodQueryBuilder without($relations)
	 * @method static _PostWithCustomMethodQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithCustomMethodQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithCustomMethodQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithCustomMethod extends Model
	{
	}

	/**
	 * @method _PostWithCustomSeparatorQueryBuilder newModelQuery()
	 * @method _PostWithCustomSeparatorQueryBuilder newQuery()
	 * @method static _PostWithCustomSeparatorQueryBuilder query()
	 * @method static _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithCustomSeparator create(array $attributes = [])
	 * @method static _PostWithCustomSeparatorQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithCustomSeparatorQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithCustomSeparator|null find($id, array $columns = ['*'])
	 * @method static _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithCustomSeparator findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithCustomSeparator first(array|string $columns = ['*'])
	 * @method static PostWithCustomSeparator firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithCustomSeparator firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithCustomSeparator firstOrFail(array $columns = ['*'])
	 * @method static PostWithCustomSeparator firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithCustomSeparator firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithCustomSeparator forceCreate(array $attributes)
	 * @method static _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithCustomSeparator getModel()
	 * @method static PostWithCustomSeparator[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithCustomSeparatorQueryBuilder getQuery()
	 * @method static _PostWithCustomSeparatorQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithCustomSeparatorQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithCustomSeparatorQueryBuilder latest(string $column = null)
	 * @method static _PostWithCustomSeparatorQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomSeparatorQueryBuilder limit(int $value)
	 * @method static PostWithCustomSeparator make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithCustomSeparator newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithCustomSeparatorQueryBuilder offset(int $value)
	 * @method static _PostWithCustomSeparatorQueryBuilder oldest(string $column = null)
	 * @method static _PostWithCustomSeparatorQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithCustomSeparatorQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithCustomSeparatorQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithCustomSeparatorQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomSeparatorQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomSeparatorQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithCustomSeparatorQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithCustomSeparatorQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomSeparatorQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithCustomSeparatorQueryBuilder take(int $value)
	 * @method static _PostWithCustomSeparatorQueryBuilder tap(callable $callback)
	 * @method static _PostWithCustomSeparatorQueryBuilder truncate()
	 * @method static _PostWithCustomSeparatorQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithCustomSeparator updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithCustomSeparatorQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithCustomSeparatorQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereKey($id)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereKeyNot($id)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSeparatorQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSeparatorQueryBuilder with($relations)
	 * @method static _PostWithCustomSeparatorQueryBuilder withCount($relations)
	 * @method static _PostWithCustomSeparatorQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithCustomSeparatorQueryBuilder without($relations)
	 * @method static _PostWithCustomSeparatorQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithCustomSeparatorQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithCustomSeparatorQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithCustomSeparator extends Model
	{
	}

	/**
	 * @method _PostWithCustomSourceQueryBuilder newModelQuery()
	 * @method _PostWithCustomSourceQueryBuilder newQuery()
	 * @method static _PostWithCustomSourceQueryBuilder query()
	 * @method static _PostWithCustomSourceCollection|PostWithCustomSource[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithCustomSource create(array $attributes = [])
	 * @method static _PostWithCustomSourceQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomSourceCollection|PostWithCustomSource[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithCustomSourceQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithCustomSource|null find($id, array $columns = ['*'])
	 * @method static _PostWithCustomSourceCollection|PostWithCustomSource[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithCustomSource findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithCustomSourceCollection|PostWithCustomSource[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithCustomSource first(array|string $columns = ['*'])
	 * @method static PostWithCustomSource firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithCustomSource firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithCustomSource firstOrFail(array $columns = ['*'])
	 * @method static PostWithCustomSource firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithCustomSource firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithCustomSource forceCreate(array $attributes)
	 * @method static _PostWithCustomSourceCollection|PostWithCustomSource[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithCustomSourceCollection|PostWithCustomSource[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithCustomSource getModel()
	 * @method static PostWithCustomSource[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithCustomSourceQueryBuilder getQuery()
	 * @method static _PostWithCustomSourceQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithCustomSourceCollection|PostWithCustomSource[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithCustomSourceQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithCustomSourceQueryBuilder latest(string $column = null)
	 * @method static _PostWithCustomSourceQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomSourceQueryBuilder limit(int $value)
	 * @method static PostWithCustomSource make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithCustomSource newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithCustomSourceQueryBuilder offset(int $value)
	 * @method static _PostWithCustomSourceQueryBuilder oldest(string $column = null)
	 * @method static _PostWithCustomSourceQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithCustomSourceQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithCustomSourceQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithCustomSourceQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomSourceQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomSourceQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithCustomSourceQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithCustomSourceQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomSourceQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithCustomSourceQueryBuilder take(int $value)
	 * @method static _PostWithCustomSourceQueryBuilder tap(callable $callback)
	 * @method static _PostWithCustomSourceQueryBuilder truncate()
	 * @method static _PostWithCustomSourceQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithCustomSource updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithCustomSourceQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithCustomSourceQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSourceQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithCustomSourceQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithCustomSourceQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSourceQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomSourceQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomSourceQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSourceQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSourceQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSourceQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereKey($id)
	 * @method static _PostWithCustomSourceQueryBuilder whereKeyNot($id)
	 * @method static _PostWithCustomSourceQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSourceQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSourceQueryBuilder with($relations)
	 * @method static _PostWithCustomSourceQueryBuilder withCount($relations)
	 * @method static _PostWithCustomSourceQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithCustomSourceQueryBuilder without($relations)
	 * @method static _PostWithCustomSourceQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithCustomSourceQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithCustomSourceQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithCustomSource extends Model
	{
	}

	/**
	 * @method _PostWithCustomSuffixQueryBuilder newModelQuery()
	 * @method _PostWithCustomSuffixQueryBuilder newQuery()
	 * @method static _PostWithCustomSuffixQueryBuilder query()
	 * @method static _PostWithCustomSuffixCollection|PostWithCustomSuffix[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithCustomSuffix create(array $attributes = [])
	 * @method static _PostWithCustomSuffixQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomSuffixCollection|PostWithCustomSuffix[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithCustomSuffixQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithCustomSuffix|null find($id, array $columns = ['*'])
	 * @method static _PostWithCustomSuffixCollection|PostWithCustomSuffix[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithCustomSuffix findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithCustomSuffixCollection|PostWithCustomSuffix[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithCustomSuffix first(array|string $columns = ['*'])
	 * @method static PostWithCustomSuffix firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithCustomSuffix firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithCustomSuffix firstOrFail(array $columns = ['*'])
	 * @method static PostWithCustomSuffix firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithCustomSuffix firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithCustomSuffix forceCreate(array $attributes)
	 * @method static _PostWithCustomSuffixCollection|PostWithCustomSuffix[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithCustomSuffixCollection|PostWithCustomSuffix[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithCustomSuffix getModel()
	 * @method static PostWithCustomSuffix[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithCustomSuffixQueryBuilder getQuery()
	 * @method static _PostWithCustomSuffixQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithCustomSuffixCollection|PostWithCustomSuffix[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithCustomSuffixQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithCustomSuffixQueryBuilder latest(string $column = null)
	 * @method static _PostWithCustomSuffixQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomSuffixQueryBuilder limit(int $value)
	 * @method static PostWithCustomSuffix make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithCustomSuffix newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithCustomSuffixQueryBuilder offset(int $value)
	 * @method static _PostWithCustomSuffixQueryBuilder oldest(string $column = null)
	 * @method static _PostWithCustomSuffixQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithCustomSuffixQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithCustomSuffixQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithCustomSuffixQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomSuffixQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithCustomSuffixQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithCustomSuffixQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithCustomSuffixQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithCustomSuffixQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithCustomSuffixQueryBuilder take(int $value)
	 * @method static _PostWithCustomSuffixQueryBuilder tap(callable $callback)
	 * @method static _PostWithCustomSuffixQueryBuilder truncate()
	 * @method static _PostWithCustomSuffixQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithCustomSuffix updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithCustomSuffixQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithCustomSuffixQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSuffixQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithCustomSuffixQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithCustomSuffixQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSuffixQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomSuffixQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithCustomSuffixQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSuffixQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSuffixQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSuffixQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereKey($id)
	 * @method static _PostWithCustomSuffixQueryBuilder whereKeyNot($id)
	 * @method static _PostWithCustomSuffixQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithCustomSuffixQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithCustomSuffixQueryBuilder with($relations)
	 * @method static _PostWithCustomSuffixQueryBuilder withCount($relations)
	 * @method static _PostWithCustomSuffixQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithCustomSuffixQueryBuilder without($relations)
	 * @method static _PostWithCustomSuffixQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithCustomSuffixQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithCustomSuffixQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithCustomSuffix extends Model
	{
	}

	/**
	 * @method _PostWithEmptySeparatorQueryBuilder newModelQuery()
	 * @method _PostWithEmptySeparatorQueryBuilder newQuery()
	 * @method static _PostWithEmptySeparatorQueryBuilder query()
	 * @method static _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithEmptySeparator create(array $attributes = [])
	 * @method static _PostWithEmptySeparatorQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithEmptySeparatorQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithEmptySeparator|null find($id, array $columns = ['*'])
	 * @method static _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithEmptySeparator findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithEmptySeparator first(array|string $columns = ['*'])
	 * @method static PostWithEmptySeparator firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithEmptySeparator firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithEmptySeparator firstOrFail(array $columns = ['*'])
	 * @method static PostWithEmptySeparator firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithEmptySeparator firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithEmptySeparator forceCreate(array $attributes)
	 * @method static _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithEmptySeparator getModel()
	 * @method static PostWithEmptySeparator[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithEmptySeparatorQueryBuilder getQuery()
	 * @method static _PostWithEmptySeparatorQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithEmptySeparatorQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithEmptySeparatorQueryBuilder latest(string $column = null)
	 * @method static _PostWithEmptySeparatorQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithEmptySeparatorQueryBuilder limit(int $value)
	 * @method static PostWithEmptySeparator make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithEmptySeparator newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithEmptySeparatorQueryBuilder offset(int $value)
	 * @method static _PostWithEmptySeparatorQueryBuilder oldest(string $column = null)
	 * @method static _PostWithEmptySeparatorQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithEmptySeparatorQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithEmptySeparatorQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithEmptySeparatorQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithEmptySeparatorQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithEmptySeparatorQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithEmptySeparatorQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithEmptySeparatorQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithEmptySeparatorQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithEmptySeparatorQueryBuilder take(int $value)
	 * @method static _PostWithEmptySeparatorQueryBuilder tap(callable $callback)
	 * @method static _PostWithEmptySeparatorQueryBuilder truncate()
	 * @method static _PostWithEmptySeparatorQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithEmptySeparator updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithEmptySeparatorQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithEmptySeparatorQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereKey($id)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereKeyNot($id)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithEmptySeparatorQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithEmptySeparatorQueryBuilder with($relations)
	 * @method static _PostWithEmptySeparatorQueryBuilder withCount($relations)
	 * @method static _PostWithEmptySeparatorQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithEmptySeparatorQueryBuilder without($relations)
	 * @method static _PostWithEmptySeparatorQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithEmptySeparatorQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithEmptySeparatorQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithEmptySeparator extends Model
	{
	}

	/**
	 * @method _PostWithForeignRulesetQueryBuilder newModelQuery()
	 * @method _PostWithForeignRulesetQueryBuilder newQuery()
	 * @method static _PostWithForeignRulesetQueryBuilder query()
	 * @method static _PostWithForeignRulesetCollection|PostWithForeignRuleset[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithForeignRuleset create(array $attributes = [])
	 * @method static _PostWithForeignRulesetQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithForeignRulesetCollection|PostWithForeignRuleset[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithForeignRulesetQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithForeignRuleset|null find($id, array $columns = ['*'])
	 * @method static _PostWithForeignRulesetCollection|PostWithForeignRuleset[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithForeignRuleset findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithForeignRulesetCollection|PostWithForeignRuleset[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithForeignRuleset first(array|string $columns = ['*'])
	 * @method static PostWithForeignRuleset firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithForeignRuleset firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithForeignRuleset firstOrFail(array $columns = ['*'])
	 * @method static PostWithForeignRuleset firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithForeignRuleset firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithForeignRuleset forceCreate(array $attributes)
	 * @method static _PostWithForeignRulesetCollection|PostWithForeignRuleset[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithForeignRulesetCollection|PostWithForeignRuleset[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithForeignRuleset getModel()
	 * @method static PostWithForeignRuleset[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithForeignRulesetQueryBuilder getQuery()
	 * @method static _PostWithForeignRulesetQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithForeignRulesetCollection|PostWithForeignRuleset[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithForeignRulesetQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithForeignRulesetQueryBuilder latest(string $column = null)
	 * @method static _PostWithForeignRulesetQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithForeignRulesetQueryBuilder limit(int $value)
	 * @method static PostWithForeignRuleset make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithForeignRuleset newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithForeignRulesetQueryBuilder offset(int $value)
	 * @method static _PostWithForeignRulesetQueryBuilder oldest(string $column = null)
	 * @method static _PostWithForeignRulesetQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithForeignRulesetQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithForeignRulesetQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithForeignRulesetQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithForeignRulesetQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithForeignRulesetQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithForeignRulesetQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithForeignRulesetQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithForeignRulesetQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithForeignRulesetQueryBuilder take(int $value)
	 * @method static _PostWithForeignRulesetQueryBuilder tap(callable $callback)
	 * @method static _PostWithForeignRulesetQueryBuilder truncate()
	 * @method static _PostWithForeignRulesetQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithForeignRuleset updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithForeignRulesetQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithForeignRulesetQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithForeignRulesetQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithForeignRulesetQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithForeignRulesetQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithForeignRulesetQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithForeignRulesetQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithForeignRulesetQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithForeignRulesetQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithForeignRulesetQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithForeignRulesetQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereKey($id)
	 * @method static _PostWithForeignRulesetQueryBuilder whereKeyNot($id)
	 * @method static _PostWithForeignRulesetQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithForeignRulesetQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithForeignRulesetQueryBuilder with($relations)
	 * @method static _PostWithForeignRulesetQueryBuilder withCount($relations)
	 * @method static _PostWithForeignRulesetQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithForeignRulesetQueryBuilder without($relations)
	 * @method static _PostWithForeignRulesetQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithForeignRulesetQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithForeignRulesetQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithForeignRuleset extends Model
	{
	}

	/**
	 * @method _PostWithIncludeTrashedQueryBuilder newModelQuery()
	 * @method _PostWithIncludeTrashedQueryBuilder newQuery()
	 * @method static _PostWithIncludeTrashedQueryBuilder query()
	 * @method static _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithIncludeTrashed create(array $attributes = [])
	 * @method static _PostWithIncludeTrashedQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithIncludeTrashedQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithIncludeTrashed|null find($id, array $columns = ['*'])
	 * @method static _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithIncludeTrashed findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithIncludeTrashed first(array|string $columns = ['*'])
	 * @method static PostWithIncludeTrashed firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithIncludeTrashed firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithIncludeTrashed firstOrFail(array $columns = ['*'])
	 * @method static PostWithIncludeTrashed firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithIncludeTrashed firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithIncludeTrashed forceCreate(array $attributes)
	 * @method static _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithIncludeTrashed getModel()
	 * @method static PostWithIncludeTrashed[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithIncludeTrashedQueryBuilder getQuery()
	 * @method static _PostWithIncludeTrashedQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithIncludeTrashedQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithIncludeTrashedQueryBuilder latest(string $column = null)
	 * @method static _PostWithIncludeTrashedQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithIncludeTrashedQueryBuilder limit(int $value)
	 * @method static PostWithIncludeTrashed make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithIncludeTrashed newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithIncludeTrashedQueryBuilder offset(int $value)
	 * @method static _PostWithIncludeTrashedQueryBuilder oldest(string $column = null)
	 * @method static _PostWithIncludeTrashedQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithIncludeTrashedQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithIncludeTrashedQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithIncludeTrashedQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithIncludeTrashedQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithIncludeTrashedQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithIncludeTrashedQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithIncludeTrashedQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithIncludeTrashedQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithIncludeTrashedQueryBuilder take(int $value)
	 * @method static _PostWithIncludeTrashedQueryBuilder tap(callable $callback)
	 * @method static _PostWithIncludeTrashedQueryBuilder truncate()
	 * @method static _PostWithIncludeTrashedQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithIncludeTrashed updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithIncludeTrashedQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithIncludeTrashedQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereKey($id)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereKeyNot($id)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithIncludeTrashedQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithIncludeTrashedQueryBuilder with($relations)
	 * @method static _PostWithIncludeTrashedQueryBuilder withCount($relations)
	 * @method static _PostWithIncludeTrashedQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithIncludeTrashedQueryBuilder without($relations)
	 * @method static _PostWithIncludeTrashedQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithIncludeTrashedQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithIncludeTrashedQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithIncludeTrashed extends Model
	{
	}

	/**
	 * @method _PostWithMaxLengthQueryBuilder newModelQuery()
	 * @method _PostWithMaxLengthQueryBuilder newQuery()
	 * @method static _PostWithMaxLengthQueryBuilder query()
	 * @method static _PostWithMaxLengthCollection|PostWithMaxLength[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithMaxLength create(array $attributes = [])
	 * @method static _PostWithMaxLengthQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMaxLengthCollection|PostWithMaxLength[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithMaxLengthQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithMaxLength|null find($id, array $columns = ['*'])
	 * @method static _PostWithMaxLengthCollection|PostWithMaxLength[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithMaxLength findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithMaxLengthCollection|PostWithMaxLength[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithMaxLength first(array|string $columns = ['*'])
	 * @method static PostWithMaxLength firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithMaxLength firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithMaxLength firstOrFail(array $columns = ['*'])
	 * @method static PostWithMaxLength firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithMaxLength firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithMaxLength forceCreate(array $attributes)
	 * @method static _PostWithMaxLengthCollection|PostWithMaxLength[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithMaxLengthCollection|PostWithMaxLength[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithMaxLength getModel()
	 * @method static PostWithMaxLength[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithMaxLengthQueryBuilder getQuery()
	 * @method static _PostWithMaxLengthQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithMaxLengthCollection|PostWithMaxLength[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithMaxLengthQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithMaxLengthQueryBuilder latest(string $column = null)
	 * @method static _PostWithMaxLengthQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMaxLengthQueryBuilder limit(int $value)
	 * @method static PostWithMaxLength make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithMaxLength newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithMaxLengthQueryBuilder offset(int $value)
	 * @method static _PostWithMaxLengthQueryBuilder oldest(string $column = null)
	 * @method static _PostWithMaxLengthQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithMaxLengthQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithMaxLengthQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithMaxLengthQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMaxLengthQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMaxLengthQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithMaxLengthQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithMaxLengthQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMaxLengthQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithMaxLengthQueryBuilder take(int $value)
	 * @method static _PostWithMaxLengthQueryBuilder tap(callable $callback)
	 * @method static _PostWithMaxLengthQueryBuilder truncate()
	 * @method static _PostWithMaxLengthQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithMaxLength updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithMaxLengthQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithMaxLengthQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithMaxLengthQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithMaxLengthQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMaxLengthQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMaxLengthQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereKey($id)
	 * @method static _PostWithMaxLengthQueryBuilder whereKeyNot($id)
	 * @method static _PostWithMaxLengthQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthQueryBuilder with($relations)
	 * @method static _PostWithMaxLengthQueryBuilder withCount($relations)
	 * @method static _PostWithMaxLengthQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithMaxLengthQueryBuilder without($relations)
	 * @method static _PostWithMaxLengthQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithMaxLengthQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithMaxLengthQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithMaxLength extends Model
	{
	}

	/**
	 * @method _PostWithMaxLengthSplitWordsQueryBuilder newModelQuery()
	 * @method _PostWithMaxLengthSplitWordsQueryBuilder newQuery()
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder query()
	 * @method static _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithMaxLengthSplitWords create(array $attributes = [])
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithMaxLengthSplitWords|null find($id, array $columns = ['*'])
	 * @method static _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithMaxLengthSplitWords findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithMaxLengthSplitWords first(array|string $columns = ['*'])
	 * @method static PostWithMaxLengthSplitWords firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithMaxLengthSplitWords firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithMaxLengthSplitWords firstOrFail(array $columns = ['*'])
	 * @method static PostWithMaxLengthSplitWords firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithMaxLengthSplitWords firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithMaxLengthSplitWords forceCreate(array $attributes)
	 * @method static _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithMaxLengthSplitWords getModel()
	 * @method static PostWithMaxLengthSplitWords[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder getQuery()
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder latest(string $column = null)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder limit(int $value)
	 * @method static PostWithMaxLengthSplitWords make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithMaxLengthSplitWords newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder offset(int $value)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder oldest(string $column = null)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder take(int $value)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder tap(callable $callback)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder truncate()
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithMaxLengthSplitWords updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereKey($id)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereKeyNot($id)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder with($relations)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder withCount($relations)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder without($relations)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithMaxLengthSplitWordsQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithMaxLengthSplitWords extends Model
	{
	}

	/**
	 * @method _PostWithMultipleSlugsQueryBuilder newModelQuery()
	 * @method _PostWithMultipleSlugsQueryBuilder newQuery()
	 * @method static _PostWithMultipleSlugsQueryBuilder query()
	 * @method static _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithMultipleSlugs create(array $attributes = [])
	 * @method static _PostWithMultipleSlugsQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithMultipleSlugsQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithMultipleSlugs|null find($id, array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithMultipleSlugs findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithMultipleSlugs first(array|string $columns = ['*'])
	 * @method static PostWithMultipleSlugs firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithMultipleSlugs firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithMultipleSlugs firstOrFail(array $columns = ['*'])
	 * @method static PostWithMultipleSlugs firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithMultipleSlugs firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithMultipleSlugs forceCreate(array $attributes)
	 * @method static _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithMultipleSlugs getModel()
	 * @method static PostWithMultipleSlugs[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithMultipleSlugsQueryBuilder getQuery()
	 * @method static _PostWithMultipleSlugsQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithMultipleSlugsQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithMultipleSlugsQueryBuilder latest(string $column = null)
	 * @method static _PostWithMultipleSlugsQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSlugsQueryBuilder limit(int $value)
	 * @method static PostWithMultipleSlugs make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithMultipleSlugs newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsQueryBuilder offset(int $value)
	 * @method static _PostWithMultipleSlugsQueryBuilder oldest(string $column = null)
	 * @method static _PostWithMultipleSlugsQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithMultipleSlugsQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithMultipleSlugsQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithMultipleSlugsQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMultipleSlugsQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSlugsQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithMultipleSlugsQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMultipleSlugsQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithMultipleSlugsQueryBuilder take(int $value)
	 * @method static _PostWithMultipleSlugsQueryBuilder tap(callable $callback)
	 * @method static _PostWithMultipleSlugsQueryBuilder truncate()
	 * @method static _PostWithMultipleSlugsQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithMultipleSlugs updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithMultipleSlugsQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithMultipleSlugsQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereKey($id)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereKeyNot($id)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsQueryBuilder with($relations)
	 * @method static _PostWithMultipleSlugsQueryBuilder withCount($relations)
	 * @method static _PostWithMultipleSlugsQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithMultipleSlugsQueryBuilder without($relations)
	 * @method static _PostWithMultipleSlugsQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithMultipleSlugsQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithMultipleSlugsQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithMultipleSlugs extends Model
	{
	}

	/**
	 * @method _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder newModelQuery()
	 * @method _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder newQuery()
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder query()
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithMultipleSlugsAndCustomSlugKey create(array $attributes = [])
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithMultipleSlugsAndCustomSlugKey|null find($id, array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithMultipleSlugsAndCustomSlugKey findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithMultipleSlugsAndCustomSlugKey first(array|string $columns = ['*'])
	 * @method static PostWithMultipleSlugsAndCustomSlugKey firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithMultipleSlugsAndCustomSlugKey firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithMultipleSlugsAndCustomSlugKey firstOrFail(array $columns = ['*'])
	 * @method static PostWithMultipleSlugsAndCustomSlugKey firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithMultipleSlugsAndCustomSlugKey firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithMultipleSlugsAndCustomSlugKey forceCreate(array $attributes)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithMultipleSlugsAndCustomSlugKey getModel()
	 * @method static PostWithMultipleSlugsAndCustomSlugKey[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder getQuery()
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder latest(string $column = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder limit(int $value)
	 * @method static PostWithMultipleSlugsAndCustomSlugKey make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithMultipleSlugsAndCustomSlugKey newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder offset(int $value)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder oldest(string $column = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder take(int $value)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder tap(callable $callback)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder truncate()
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithMultipleSlugsAndCustomSlugKey updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereKey($id)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereKeyNot($id)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder with($relations)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder withCount($relations)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder without($relations)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 * @method static _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereSlug(string $slug)
	 */
	class PostWithMultipleSlugsAndCustomSlugKey extends Model
	{
	}

	/**
	 * @method _PostWithMultipleSlugsAndHelperTraitQueryBuilder newModelQuery()
	 * @method _PostWithMultipleSlugsAndHelperTraitQueryBuilder newQuery()
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder query()
	 * @method static _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithMultipleSlugsAndHelperTrait create(array $attributes = [])
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithMultipleSlugsAndHelperTrait|null find($id, array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithMultipleSlugsAndHelperTrait findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithMultipleSlugsAndHelperTrait first(array|string $columns = ['*'])
	 * @method static PostWithMultipleSlugsAndHelperTrait firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithMultipleSlugsAndHelperTrait firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithMultipleSlugsAndHelperTrait firstOrFail(array $columns = ['*'])
	 * @method static PostWithMultipleSlugsAndHelperTrait firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithMultipleSlugsAndHelperTrait firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithMultipleSlugsAndHelperTrait forceCreate(array $attributes)
	 * @method static _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithMultipleSlugsAndHelperTrait getModel()
	 * @method static PostWithMultipleSlugsAndHelperTrait[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder getQuery()
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder latest(string $column = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder limit(int $value)
	 * @method static PostWithMultipleSlugsAndHelperTrait make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithMultipleSlugsAndHelperTrait newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder offset(int $value)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder oldest(string $column = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder take(int $value)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder tap(callable $callback)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder truncate()
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithMultipleSlugsAndHelperTrait updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereKey($id)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereKeyNot($id)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder with($relations)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder withCount($relations)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder without($relations)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 * @method static _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereSlug(string $slug)
	 */
	class PostWithMultipleSlugsAndHelperTrait extends Model
	{
	}

	/**
	 * @method _PostWithMultipleSourcesQueryBuilder newModelQuery()
	 * @method _PostWithMultipleSourcesQueryBuilder newQuery()
	 * @method static _PostWithMultipleSourcesQueryBuilder query()
	 * @method static _PostWithMultipleSourcesCollection|PostWithMultipleSources[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithMultipleSources create(array $attributes = [])
	 * @method static _PostWithMultipleSourcesQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSourcesCollection|PostWithMultipleSources[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithMultipleSourcesQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithMultipleSources|null find($id, array $columns = ['*'])
	 * @method static _PostWithMultipleSourcesCollection|PostWithMultipleSources[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithMultipleSources findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithMultipleSourcesCollection|PostWithMultipleSources[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithMultipleSources first(array|string $columns = ['*'])
	 * @method static PostWithMultipleSources firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithMultipleSources firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithMultipleSources firstOrFail(array $columns = ['*'])
	 * @method static PostWithMultipleSources firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithMultipleSources firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithMultipleSources forceCreate(array $attributes)
	 * @method static _PostWithMultipleSourcesCollection|PostWithMultipleSources[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithMultipleSourcesCollection|PostWithMultipleSources[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithMultipleSources getModel()
	 * @method static PostWithMultipleSources[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithMultipleSourcesQueryBuilder getQuery()
	 * @method static _PostWithMultipleSourcesQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithMultipleSourcesCollection|PostWithMultipleSources[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithMultipleSourcesQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithMultipleSourcesQueryBuilder latest(string $column = null)
	 * @method static _PostWithMultipleSourcesQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSourcesQueryBuilder limit(int $value)
	 * @method static PostWithMultipleSources make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithMultipleSources newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithMultipleSourcesQueryBuilder offset(int $value)
	 * @method static _PostWithMultipleSourcesQueryBuilder oldest(string $column = null)
	 * @method static _PostWithMultipleSourcesQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithMultipleSourcesQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithMultipleSourcesQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithMultipleSourcesQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMultipleSourcesQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithMultipleSourcesQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithMultipleSourcesQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithMultipleSourcesQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithMultipleSourcesQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithMultipleSourcesQueryBuilder take(int $value)
	 * @method static _PostWithMultipleSourcesQueryBuilder tap(callable $callback)
	 * @method static _PostWithMultipleSourcesQueryBuilder truncate()
	 * @method static _PostWithMultipleSourcesQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithMultipleSources updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithMultipleSourcesQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithMultipleSourcesQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereKey($id)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereKeyNot($id)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithMultipleSourcesQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithMultipleSourcesQueryBuilder with($relations)
	 * @method static _PostWithMultipleSourcesQueryBuilder withCount($relations)
	 * @method static _PostWithMultipleSourcesQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithMultipleSourcesQueryBuilder without($relations)
	 * @method static _PostWithMultipleSourcesQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithMultipleSourcesQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithMultipleSourcesQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithMultipleSources extends Model
	{
	}

	/**
	 * @method _PostWithNoSourceQueryBuilder newModelQuery()
	 * @method _PostWithNoSourceQueryBuilder newQuery()
	 * @method static _PostWithNoSourceQueryBuilder query()
	 * @method static _PostWithNoSourceCollection|PostWithNoSource[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithNoSource create(array $attributes = [])
	 * @method static _PostWithNoSourceQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithNoSourceCollection|PostWithNoSource[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithNoSourceQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithNoSource|null find($id, array $columns = ['*'])
	 * @method static _PostWithNoSourceCollection|PostWithNoSource[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithNoSource findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithNoSourceCollection|PostWithNoSource[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithNoSource first(array|string $columns = ['*'])
	 * @method static PostWithNoSource firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithNoSource firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithNoSource firstOrFail(array $columns = ['*'])
	 * @method static PostWithNoSource firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithNoSource firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithNoSource forceCreate(array $attributes)
	 * @method static _PostWithNoSourceCollection|PostWithNoSource[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithNoSourceCollection|PostWithNoSource[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithNoSource getModel()
	 * @method static PostWithNoSource[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithNoSourceQueryBuilder getQuery()
	 * @method static _PostWithNoSourceQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithNoSourceCollection|PostWithNoSource[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithNoSourceQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithNoSourceQueryBuilder latest(string $column = null)
	 * @method static _PostWithNoSourceQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithNoSourceQueryBuilder limit(int $value)
	 * @method static PostWithNoSource make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithNoSource newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithNoSourceQueryBuilder offset(int $value)
	 * @method static _PostWithNoSourceQueryBuilder oldest(string $column = null)
	 * @method static _PostWithNoSourceQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithNoSourceQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithNoSourceQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithNoSourceQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithNoSourceQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithNoSourceQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithNoSourceQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithNoSourceQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithNoSourceQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithNoSourceQueryBuilder take(int $value)
	 * @method static _PostWithNoSourceQueryBuilder tap(callable $callback)
	 * @method static _PostWithNoSourceQueryBuilder truncate()
	 * @method static _PostWithNoSourceQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithNoSource updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithNoSourceQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithNoSourceQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithNoSourceQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithNoSourceQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithNoSourceQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithNoSourceQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithNoSourceQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithNoSourceQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithNoSourceQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithNoSourceQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithNoSourceQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereKey($id)
	 * @method static _PostWithNoSourceQueryBuilder whereKeyNot($id)
	 * @method static _PostWithNoSourceQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithNoSourceQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithNoSourceQueryBuilder with($relations)
	 * @method static _PostWithNoSourceQueryBuilder withCount($relations)
	 * @method static _PostWithNoSourceQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithNoSourceQueryBuilder without($relations)
	 * @method static _PostWithNoSourceQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithNoSourceQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithNoSourceQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithNoSource extends Model
	{
	}

	/**
	 * @method _PostWithOnUpdateQueryBuilder newModelQuery()
	 * @method _PostWithOnUpdateQueryBuilder newQuery()
	 * @method static _PostWithOnUpdateQueryBuilder query()
	 * @method static _PostWithOnUpdateCollection|PostWithOnUpdate[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithOnUpdate create(array $attributes = [])
	 * @method static _PostWithOnUpdateQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithOnUpdateCollection|PostWithOnUpdate[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithOnUpdateQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithOnUpdate|null find($id, array $columns = ['*'])
	 * @method static _PostWithOnUpdateCollection|PostWithOnUpdate[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithOnUpdate findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithOnUpdateCollection|PostWithOnUpdate[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithOnUpdate first(array|string $columns = ['*'])
	 * @method static PostWithOnUpdate firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithOnUpdate firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithOnUpdate firstOrFail(array $columns = ['*'])
	 * @method static PostWithOnUpdate firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithOnUpdate firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithOnUpdate forceCreate(array $attributes)
	 * @method static _PostWithOnUpdateCollection|PostWithOnUpdate[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithOnUpdateCollection|PostWithOnUpdate[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithOnUpdate getModel()
	 * @method static PostWithOnUpdate[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithOnUpdateQueryBuilder getQuery()
	 * @method static _PostWithOnUpdateQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithOnUpdateCollection|PostWithOnUpdate[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithOnUpdateQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithOnUpdateQueryBuilder latest(string $column = null)
	 * @method static _PostWithOnUpdateQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithOnUpdateQueryBuilder limit(int $value)
	 * @method static PostWithOnUpdate make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithOnUpdate newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithOnUpdateQueryBuilder offset(int $value)
	 * @method static _PostWithOnUpdateQueryBuilder oldest(string $column = null)
	 * @method static _PostWithOnUpdateQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithOnUpdateQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithOnUpdateQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithOnUpdateQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithOnUpdateQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithOnUpdateQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithOnUpdateQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithOnUpdateQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithOnUpdateQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithOnUpdateQueryBuilder take(int $value)
	 * @method static _PostWithOnUpdateQueryBuilder tap(callable $callback)
	 * @method static _PostWithOnUpdateQueryBuilder truncate()
	 * @method static _PostWithOnUpdateQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithOnUpdate updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithOnUpdateQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithOnUpdateQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithOnUpdateQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithOnUpdateQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithOnUpdateQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithOnUpdateQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithOnUpdateQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithOnUpdateQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithOnUpdateQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithOnUpdateQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithOnUpdateQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereKey($id)
	 * @method static _PostWithOnUpdateQueryBuilder whereKeyNot($id)
	 * @method static _PostWithOnUpdateQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithOnUpdateQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithOnUpdateQueryBuilder with($relations)
	 * @method static _PostWithOnUpdateQueryBuilder withCount($relations)
	 * @method static _PostWithOnUpdateQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithOnUpdateQueryBuilder without($relations)
	 * @method static _PostWithOnUpdateQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithOnUpdateQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithOnUpdateQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithOnUpdate extends Model
	{
	}

	/**
	 * @property Author $author
	 * @method BelongsTo|_AuthorQueryBuilder author()
	 * @method _PostWithRelationQueryBuilder newModelQuery()
	 * @method _PostWithRelationQueryBuilder newQuery()
	 * @method static _PostWithRelationQueryBuilder query()
	 * @method static _PostWithRelationCollection|PostWithRelation[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithRelation create(array $attributes = [])
	 * @method static _PostWithRelationQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithRelationCollection|PostWithRelation[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithRelationQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithRelation|null find($id, array $columns = ['*'])
	 * @method static _PostWithRelationCollection|PostWithRelation[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithRelation findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithRelationCollection|PostWithRelation[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithRelation first(array|string $columns = ['*'])
	 * @method static PostWithRelation firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithRelation firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithRelation firstOrFail(array $columns = ['*'])
	 * @method static PostWithRelation firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithRelation firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithRelation forceCreate(array $attributes)
	 * @method static _PostWithRelationCollection|PostWithRelation[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithRelationCollection|PostWithRelation[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithRelation getModel()
	 * @method static PostWithRelation[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithRelationQueryBuilder getQuery()
	 * @method static _PostWithRelationQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithRelationCollection|PostWithRelation[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithRelationQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithRelationQueryBuilder latest(string $column = null)
	 * @method static _PostWithRelationQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithRelationQueryBuilder limit(int $value)
	 * @method static PostWithRelation make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithRelation newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithRelationQueryBuilder offset(int $value)
	 * @method static _PostWithRelationQueryBuilder oldest(string $column = null)
	 * @method static _PostWithRelationQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithRelationQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithRelationQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithRelationQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithRelationQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithRelationQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithRelationQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithRelationQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithRelationQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithRelationQueryBuilder take(int $value)
	 * @method static _PostWithRelationQueryBuilder tap(callable $callback)
	 * @method static _PostWithRelationQueryBuilder truncate()
	 * @method static _PostWithRelationQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithRelation updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithRelationQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithRelationQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithRelationQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithRelationQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithRelationQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithRelationQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithRelationQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithRelationQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithRelationQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithRelationQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithRelationQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereKey($id)
	 * @method static _PostWithRelationQueryBuilder whereKeyNot($id)
	 * @method static _PostWithRelationQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithRelationQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithRelationQueryBuilder with($relations)
	 * @method static _PostWithRelationQueryBuilder withCount($relations)
	 * @method static _PostWithRelationQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithRelationQueryBuilder without($relations)
	 * @method static _PostWithRelationQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithRelationQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithRelationQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithRelation extends Model
	{
	}

	/**
	 * @method _PostWithReservedSlugQueryBuilder newModelQuery()
	 * @method _PostWithReservedSlugQueryBuilder newQuery()
	 * @method static _PostWithReservedSlugQueryBuilder query()
	 * @method static _PostWithReservedSlugCollection|PostWithReservedSlug[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithReservedSlug create(array $attributes = [])
	 * @method static _PostWithReservedSlugQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithReservedSlugCollection|PostWithReservedSlug[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithReservedSlugQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithReservedSlug|null find($id, array $columns = ['*'])
	 * @method static _PostWithReservedSlugCollection|PostWithReservedSlug[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithReservedSlug findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithReservedSlugCollection|PostWithReservedSlug[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithReservedSlug first(array|string $columns = ['*'])
	 * @method static PostWithReservedSlug firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithReservedSlug firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithReservedSlug firstOrFail(array $columns = ['*'])
	 * @method static PostWithReservedSlug firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithReservedSlug firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithReservedSlug forceCreate(array $attributes)
	 * @method static _PostWithReservedSlugCollection|PostWithReservedSlug[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithReservedSlugCollection|PostWithReservedSlug[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithReservedSlug getModel()
	 * @method static PostWithReservedSlug[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithReservedSlugQueryBuilder getQuery()
	 * @method static _PostWithReservedSlugQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithReservedSlugCollection|PostWithReservedSlug[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithReservedSlugQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithReservedSlugQueryBuilder latest(string $column = null)
	 * @method static _PostWithReservedSlugQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithReservedSlugQueryBuilder limit(int $value)
	 * @method static PostWithReservedSlug make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithReservedSlug newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithReservedSlugQueryBuilder offset(int $value)
	 * @method static _PostWithReservedSlugQueryBuilder oldest(string $column = null)
	 * @method static _PostWithReservedSlugQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithReservedSlugQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithReservedSlugQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithReservedSlugQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithReservedSlugQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithReservedSlugQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithReservedSlugQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithReservedSlugQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithReservedSlugQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithReservedSlugQueryBuilder take(int $value)
	 * @method static _PostWithReservedSlugQueryBuilder tap(callable $callback)
	 * @method static _PostWithReservedSlugQueryBuilder truncate()
	 * @method static _PostWithReservedSlugQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithReservedSlug updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithReservedSlugQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithReservedSlugQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithReservedSlugQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithReservedSlugQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithReservedSlugQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithReservedSlugQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithReservedSlugQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithReservedSlugQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithReservedSlugQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithReservedSlugQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithReservedSlugQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereKey($id)
	 * @method static _PostWithReservedSlugQueryBuilder whereKeyNot($id)
	 * @method static _PostWithReservedSlugQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithReservedSlugQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithReservedSlugQueryBuilder with($relations)
	 * @method static _PostWithReservedSlugQueryBuilder withCount($relations)
	 * @method static _PostWithReservedSlugQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithReservedSlugQueryBuilder without($relations)
	 * @method static _PostWithReservedSlugQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithReservedSlugQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithReservedSlugQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithReservedSlug extends Model
	{
	}

	/**
	 * @method _PostWithSoftDeletingQueryBuilder newModelQuery()
	 * @method _PostWithSoftDeletingQueryBuilder newQuery()
	 * @method static _PostWithSoftDeletingQueryBuilder query()
	 * @method static _PostWithSoftDeletingCollection|PostWithSoftDeleting[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithSoftDeleting create(array $attributes = [])
	 * @method static _PostWithSoftDeletingQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithSoftDeletingCollection|PostWithSoftDeleting[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithSoftDeletingQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithSoftDeleting|null find($id, array $columns = ['*'])
	 * @method static _PostWithSoftDeletingCollection|PostWithSoftDeleting[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithSoftDeleting findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithSoftDeletingCollection|PostWithSoftDeleting[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithSoftDeleting first(array|string $columns = ['*'])
	 * @method static PostWithSoftDeleting firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithSoftDeleting firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithSoftDeleting firstOrFail(array $columns = ['*'])
	 * @method static PostWithSoftDeleting firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithSoftDeleting firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithSoftDeleting forceCreate(array $attributes)
	 * @method static _PostWithSoftDeletingCollection|PostWithSoftDeleting[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithSoftDeletingCollection|PostWithSoftDeleting[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithSoftDeleting getModel()
	 * @method static PostWithSoftDeleting[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithSoftDeletingQueryBuilder getQuery()
	 * @method static _PostWithSoftDeletingQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithSoftDeletingCollection|PostWithSoftDeleting[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithSoftDeletingQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithSoftDeletingQueryBuilder latest(string $column = null)
	 * @method static _PostWithSoftDeletingQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithSoftDeletingQueryBuilder limit(int $value)
	 * @method static PostWithSoftDeleting make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithSoftDeleting newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithSoftDeletingQueryBuilder offset(int $value)
	 * @method static _PostWithSoftDeletingQueryBuilder oldest(string $column = null)
	 * @method static _PostWithSoftDeletingQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithSoftDeletingQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithSoftDeletingQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithSoftDeletingQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithSoftDeletingQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithSoftDeletingQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithSoftDeletingQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithSoftDeletingQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithSoftDeletingQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithSoftDeletingQueryBuilder take(int $value)
	 * @method static _PostWithSoftDeletingQueryBuilder tap(callable $callback)
	 * @method static _PostWithSoftDeletingQueryBuilder truncate()
	 * @method static _PostWithSoftDeletingQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithSoftDeleting updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithSoftDeletingQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithSoftDeletingQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithSoftDeletingQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithSoftDeletingQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithSoftDeletingQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithSoftDeletingQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereKey($id)
	 * @method static _PostWithSoftDeletingQueryBuilder whereKeyNot($id)
	 * @method static _PostWithSoftDeletingQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingQueryBuilder with($relations)
	 * @method static _PostWithSoftDeletingQueryBuilder withCount($relations)
	 * @method static _PostWithSoftDeletingQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithSoftDeletingQueryBuilder without($relations)
	 * @method static _PostWithSoftDeletingQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithSoftDeletingQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithSoftDeletingQueryBuilder withTrashed()
	 * @method static _PostWithSoftDeletingQueryBuilder onlyTrashed()
	 * @method static _PostWithSoftDeletingQueryBuilder withoutTrashed()
	 * @method static _PostWithSoftDeletingQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithSoftDeleting extends Model
	{
	}

	/**
	 * @method _PostWithSoftDeletingIncludeTrashedQueryBuilder newModelQuery()
	 * @method _PostWithSoftDeletingIncludeTrashedQueryBuilder newQuery()
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder query()
	 * @method static _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithSoftDeletingIncludeTrashed create(array $attributes = [])
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithSoftDeletingIncludeTrashed|null find($id, array $columns = ['*'])
	 * @method static _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithSoftDeletingIncludeTrashed findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithSoftDeletingIncludeTrashed first(array|string $columns = ['*'])
	 * @method static PostWithSoftDeletingIncludeTrashed firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithSoftDeletingIncludeTrashed firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithSoftDeletingIncludeTrashed firstOrFail(array $columns = ['*'])
	 * @method static PostWithSoftDeletingIncludeTrashed firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithSoftDeletingIncludeTrashed firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithSoftDeletingIncludeTrashed forceCreate(array $attributes)
	 * @method static _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithSoftDeletingIncludeTrashed getModel()
	 * @method static PostWithSoftDeletingIncludeTrashed[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder getQuery()
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder latest(string $column = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder limit(int $value)
	 * @method static PostWithSoftDeletingIncludeTrashed make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithSoftDeletingIncludeTrashed newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder offset(int $value)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder oldest(string $column = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder take(int $value)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder tap(callable $callback)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder truncate()
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithSoftDeletingIncludeTrashed updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereKey($id)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereKeyNot($id)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder with($relations)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder withCount($relations)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder without($relations)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder withTrashed()
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder onlyTrashed()
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder withoutTrashed()
	 * @method static _PostWithSoftDeletingIncludeTrashedQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class PostWithSoftDeletingIncludeTrashed extends Model
	{
	}

	/**
	 * @property Author $author
	 * @method BelongsTo|_AuthorQueryBuilder author()
	 * @method _PostWithUniqueSlugConstraintsQueryBuilder newModelQuery()
	 * @method _PostWithUniqueSlugConstraintsQueryBuilder newQuery()
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder query()
	 * @method static _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static PostWithUniqueSlugConstraints create(array $attributes = [])
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static PostWithUniqueSlugConstraints|null find($id, array $columns = ['*'])
	 * @method static _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static PostWithUniqueSlugConstraints findOrFail($id, array $columns = ['*'])
	 * @method static _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] findOrNew($id, array $columns = ['*'])
	 * @method static PostWithUniqueSlugConstraints first(array|string $columns = ['*'])
	 * @method static PostWithUniqueSlugConstraints firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static PostWithUniqueSlugConstraints firstOrCreate(array $attributes, array $values = [])
	 * @method static PostWithUniqueSlugConstraints firstOrFail(array $columns = ['*'])
	 * @method static PostWithUniqueSlugConstraints firstOrNew(array $attributes, array $values = [])
	 * @method static PostWithUniqueSlugConstraints firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static PostWithUniqueSlugConstraints forceCreate(array $attributes)
	 * @method static _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] fromQuery(string $query, array $bindings = [])
	 * @method static _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static PostWithUniqueSlugConstraints getModel()
	 * @method static PostWithUniqueSlugConstraints[] getModels(array|string $columns = ['*'])
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder getQuery()
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder latest(string $column = null)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder limit(int $value)
	 * @method static PostWithUniqueSlugConstraints make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static PostWithUniqueSlugConstraints newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder offset(int $value)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder oldest(string $column = null)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder orderByDesc(string $column)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder select(array $columns = ['*'])
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder take(int $value)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder tap(callable $callback)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder truncate()
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static PostWithUniqueSlugConstraints updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereKey($id)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereKeyNot($id)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder with($relations)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder withCount($relations)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder without($relations)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder withoutGlobalScopes(array $scopes = null)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 * @method static _PostWithUniqueSlugConstraintsQueryBuilder withUniqueSlugConstraints(Model $model, string $attribute, array $config, string $slug)
	 */
	class PostWithUniqueSlugConstraints extends Model
	{
	}
}

namespace Illuminate\Notifications {

	use Illuminate\Contracts\Support\Arrayable;
	use Illuminate\Database\Eloquent\Model;
	use Illuminate\Database\Eloquent\Relations\MorphTo;
	use Illuminate\Database\Eloquent\Scope;
	use LaravelIdea\Helper\Illuminate\Notifications\_DatabaseNotificationCollection;
	use LaravelIdea\Helper\Illuminate\Notifications\_DatabaseNotificationQueryBuilder;

	/**
	 * @property Model $notifiable
	 * @method MorphTo notifiable()
	 * @method _DatabaseNotificationQueryBuilder newModelQuery()
	 * @method _DatabaseNotificationQueryBuilder newQuery()
	 * @method static _DatabaseNotificationQueryBuilder query()
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] all()
	 * @method static average(string $column)
	 * @method static avg(string $column)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @method static int count(string $columns = '*')
	 * @method static DatabaseNotification create(array $attributes = [])
	 * @method static _DatabaseNotificationQueryBuilder crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] cursor()
	 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool doesntExist()
	 * @method static bool doesntExistOr(\Closure $callback)
	 * @method static _DatabaseNotificationQueryBuilder each(callable $callback, int $count = 1000)
	 * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @method static bool exists()
	 * @method static bool existsOr(\Closure $callback)
	 * @method static DatabaseNotification|null find($id, array $columns = ['*'])
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method static DatabaseNotification findOrFail($id, array $columns = ['*'])
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] findOrNew($id, array $columns = ['*'])
	 * @method static DatabaseNotification first(array|string $columns = ['*'])
	 * @method static DatabaseNotification firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method static DatabaseNotification firstOrCreate(array $attributes, array $values = [])
	 * @method static DatabaseNotification firstOrFail(array $columns = ['*'])
	 * @method static DatabaseNotification firstOrNew(array $attributes, array $values = [])
	 * @method static DatabaseNotification firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static DatabaseNotification forceCreate(array $attributes)
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] fromQuery(string $query, array $bindings = [])
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] get(array|string $columns = ['*'])
	 * @method static int getCountForPagination(array $columns = ['*'])
	 * @method static DatabaseNotification getModel()
	 * @method static DatabaseNotification[] getModels(array|string $columns = ['*'])
	 * @method static _DatabaseNotificationQueryBuilder getQuery()
	 * @method static _DatabaseNotificationQueryBuilder groupBy(array $groups)
	 * @method static bool hasGlobalMacro(string $name)
	 * @method static bool hasMacro(string $name)
	 * @method static _DatabaseNotificationCollection|DatabaseNotification[] hydrate(array $items)
	 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
	 * @method static bool insert(array $values)
	 * @method static int insertGetId(array $values, null|string $sequence = null)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @method static _DatabaseNotificationQueryBuilder join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @method static _DatabaseNotificationQueryBuilder latest(string $column = null)
	 * @method static _DatabaseNotificationQueryBuilder leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _DatabaseNotificationQueryBuilder limit(int $value)
	 * @method static DatabaseNotification make(array $attributes = [])
	 * @method static max(string $column)
	 * @method static min(string $column)
	 * @method static DatabaseNotification newModelInstance(array $attributes = [])
	 * @method static int numericAggregate(string $function, array $columns = ['*'])
	 * @method static _DatabaseNotificationQueryBuilder offset(int $value)
	 * @method static _DatabaseNotificationQueryBuilder oldest(string $column = null)
	 * @method static _DatabaseNotificationQueryBuilder orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @method static _DatabaseNotificationQueryBuilder orderByDesc(string $column)
	 * @method static _DatabaseNotificationQueryBuilder orderByRaw(string $sql, array $bindings = [])
	 * @method static _DatabaseNotificationQueryBuilder paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _DatabaseNotificationQueryBuilder rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @method static _DatabaseNotificationQueryBuilder select(array $columns = ['*'])
	 * @method static _DatabaseNotificationQueryBuilder setQuery(\Illuminate\Database\Query\Builder $query)
	 * @method static _DatabaseNotificationQueryBuilder simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @method static _DatabaseNotificationQueryBuilder skip(int $value)
	 * @method static int sum(string $column)
	 * @method static _DatabaseNotificationQueryBuilder take(int $value)
	 * @method static _DatabaseNotificationQueryBuilder tap(callable $callback)
	 * @method static _DatabaseNotificationQueryBuilder truncate()
	 * @method static _DatabaseNotificationQueryBuilder unless($value, callable $callback, callable|null $default = null)
	 * @method static int update(array $values)
	 * @method static DatabaseNotification updateOrCreate(array $attributes, array $values = [])
	 * @method static bool updateOrInsert(array $attributes, array $values = [])
	 * @method static _DatabaseNotificationQueryBuilder when($value, callable $callback, callable|null $default = null)
	 * @method static _DatabaseNotificationQueryBuilder where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereDoesntHave(string $relation, \Closure $callback = null)
	 * @method static _DatabaseNotificationQueryBuilder whereDoesntHaveMorph(string $relation, array|string $types, \Closure $callback = null)
	 * @method static _DatabaseNotificationQueryBuilder whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _DatabaseNotificationQueryBuilder whereHasMorph(string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
	 * @method static _DatabaseNotificationQueryBuilder whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereKey($id)
	 * @method static _DatabaseNotificationQueryBuilder whereKeyNot($id)
	 * @method static _DatabaseNotificationQueryBuilder whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNested(\Closure $callback, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNotIn(string $column, $values, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNotNull(array|string $columns, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @method static _DatabaseNotificationQueryBuilder whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @method static _DatabaseNotificationQueryBuilder with($relations)
	 * @method static _DatabaseNotificationQueryBuilder withCount($relations)
	 * @method static _DatabaseNotificationQueryBuilder withGlobalScope(string $identifier, \Closure|Scope $scope)
	 * @method static _DatabaseNotificationQueryBuilder without($relations)
	 * @method static _DatabaseNotificationQueryBuilder withoutGlobalScope(Scope|string $scope)
	 * @method static _DatabaseNotificationQueryBuilder withoutGlobalScopes(array $scopes = null)
	 */
	class DatabaseNotification extends Model
	{
	}
}

namespace LaravelIdea\Helper {

	use Illuminate\Contracts\Support\Arrayable;
	use Illuminate\Database\Eloquent\Builder;
	use Illuminate\Support\Collection;

	/**
	 * @see \Illuminate\Database\Query\Builder::select
	 * @method $this select(array $columns = ['*'])
	 * @see \Illuminate\Database\Query\Builder::paginate
	 * @method $this paginate(int $perPage = 15, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @see \Illuminate\Database\Query\Builder::addSelect
	 * @method $this addSelect(array $column)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::when
	 * @method $this when($value, callable $callback, callable|null $default = null)
	 * @see \Illuminate\Database\Query\Builder::whereIn
	 * @method $this whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::orWhereExists
	 * @method $this orWhereExists(\Closure $callback, bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::whereJsonLength
	 * @method $this whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::orWhereNotIn
	 * @method $this orWhereNotIn(string $column, $values)
	 * @see \Illuminate\Database\Query\Builder::selectRaw
	 * @method $this selectRaw(string $expression, array $bindings = [])
	 * @see \Illuminate\Database\Query\Builder::truncate
	 * @method $this truncate()
	 * @see \Illuminate\Database\Query\Builder::lock
	 * @method $this lock(bool|string $value = true)
	 * @see \Illuminate\Database\Query\Builder::insertOrIgnore
	 * @method $this insertOrIgnore(array $values)
	 * @see \Illuminate\Database\Query\Builder::join
	 * @method $this join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @see \Illuminate\Database\Query\Builder::unionAll
	 * @method $this unionAll(\Closure|\Illuminate\Database\Query\Builder $query)
	 * @see \Illuminate\Database\Query\Builder::whereMonth
	 * @method $this whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::having
	 * @method $this having(string $column, null|string $operator = null, null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::orWhereNull
	 * @method $this orWhereNull(string $column)
	 * @see \Illuminate\Database\Query\Builder::whereNested
	 * @method $this whereNested(\Closure $callback, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::joinWhere
	 * @method $this joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type = 'inner')
	 * @see \Illuminate\Database\Query\Builder::orWhereJsonContains
	 * @method $this orWhereJsonContains(string $column, $value)
	 * @see \Illuminate\Database\Query\Builder::raw
	 * @method $this raw($value)
	 * @see \Illuminate\Database\Query\Builder::orderBy
	 * @method $this orderBy(\Closure|\Illuminate\Database\Query\Builder|string $column, string $direction = 'asc')
	 * @see \Illuminate\Database\Query\Builder::orWhereRowValues
	 * @method $this orWhereRowValues(array $columns, string $operator, array $values)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::each
	 * @method $this each(callable $callback, int $count = 1000)
	 * @see \Illuminate\Database\Query\Builder::setBindings
	 * @method $this setBindings(array $bindings, string $type = 'where')
	 * @see \Illuminate\Database\Query\Builder::orWhereJsonLength
	 * @method $this orWhereJsonLength(string $column, $operator, $value = null)
	 * @see \Illuminate\Database\Query\Builder::whereRowValues
	 * @method $this whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::useWritePdo
	 * @method $this useWritePdo()
	 * @see \Illuminate\Database\Query\Builder::orWhereNotExists
	 * @method $this orWhereNotExists(\Closure $callback)
	 * @see \Illuminate\Database\Query\Builder::orWhereIn
	 * @method $this orWhereIn(string $column, $values)
	 * @see \Illuminate\Database\Query\Builder::newQuery
	 * @method $this newQuery()
	 * @see \Illuminate\Database\Query\Builder::rightJoinSub
	 * @method $this rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|string $query, string $as, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::crossJoin
	 * @method $this crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::orderByDesc
	 * @method $this orderByDesc(string $column)
	 * @see \Illuminate\Database\Query\Builder::orWhereNotNull
	 * @method $this orWhereNotNull(string $column)
	 * @see \Illuminate\Database\Query\Builder::average
	 * @method $this average(string $column)
	 * @see \Illuminate\Database\Query\Builder::existsOr
	 * @method $this existsOr(\Closure $callback)
	 * @see \Illuminate\Database\Query\Builder::getProcessor
	 * @method $this getProcessor()
	 * @see \Illuminate\Database\Query\Builder::increment
	 * @method $this increment(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Query\Builder::havingRaw
	 * @method $this havingRaw(string $sql, array $bindings = [], string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::skip
	 * @method $this skip(int $value)
	 * @see \Illuminate\Database\Query\Builder::sum
	 * @method $this sum(string $column)
	 * @see \Illuminate\Database\Query\Builder::leftJoinWhere
	 * @method $this leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
	 * @see \Illuminate\Database\Query\Builder::doesntExistOr
	 * @method $this doesntExistOr(\Closure $callback)
	 * @see \Illuminate\Database\Query\Builder::orWhereColumn
	 * @method $this orWhereColumn(array|string $first, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::getRawBindings
	 * @method $this getRawBindings()
	 * @see \Illuminate\Database\Query\Builder::min
	 * @method $this min(string $column)
	 * @see \Illuminate\Support\Traits\Macroable::hasMacro
	 * @method $this hasMacro(string $name)
	 * @see \Illuminate\Database\Query\Builder::whereNotExists
	 * @method $this whereNotExists(\Closure $callback, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::whereIntegerInRaw
	 * @method $this whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::unless
	 * @method $this unless($value, callable $callback, callable|null $default = null)
	 * @see \Illuminate\Database\Query\Builder::whereDay
	 * @method $this whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::get
	 * @method $this get(array|string $columns = ['*'])
	 * @see \Illuminate\Database\Query\Builder::whereNotIn
	 * @method $this whereNotIn(string $column, $values, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::whereTime
	 * @method $this whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::where
	 * @method $this where(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::latest
	 * @method $this latest(string $column = 'created_at')
	 * @see \Illuminate\Database\Query\Builder::forNestedWhere
	 * @method $this forNestedWhere()
	 * @see \Illuminate\Database\Query\Builder::insertUsing
	 * @method $this insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
	 * @see \Illuminate\Database\Query\Builder::max
	 * @method $this max(string $column)
	 * @see \Illuminate\Database\Query\Builder::rightJoinWhere
	 * @method $this rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
	 * @see \Illuminate\Database\Query\Builder::whereExists
	 * @method $this whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::inRandomOrder
	 * @method $this inRandomOrder(string $seed = '')
	 * @see \Illuminate\Database\Query\Builder::havingBetween
	 * @method $this havingBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::union
	 * @method $this union(\Closure|\Illuminate\Database\Query\Builder $query, bool $all = false)
	 * @see \Illuminate\Database\Query\Builder::groupBy
	 * @method $this groupBy(array $groups)
	 * @see \Illuminate\Database\Query\Builder::orWhereYear
	 * @method $this orWhereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null)
	 * @see \Illuminate\Database\Query\Builder::orWhereDay
	 * @method $this orWhereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::chunkById
	 * @method $this chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
	 * @see \Illuminate\Database\Query\Builder::joinSub
	 * @method $this joinSub(\Closure|\Illuminate\Database\Query\Builder|string $query, string $as, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
	 * @see \Illuminate\Database\Query\Builder::whereDate
	 * @method $this whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::whereJsonDoesntContain
	 * @method $this whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::oldest
	 * @method $this oldest(string $column = 'created_at')
	 * @see \Illuminate\Database\Query\Builder::decrement
	 * @method $this decrement(string $column, float|int $amount = 1, array $extra = [])
	 * @see \Illuminate\Database\Query\Builder::forPageAfterId
	 * @method $this forPageAfterId(int $perPage = 15, int|null $lastId = 0, string $column = 'id')
	 * @see \Illuminate\Database\Query\Builder::forPage
	 * @method $this forPage(int $page, int $perPage = 15)
	 * @see \Illuminate\Database\Query\Builder::exists
	 * @method $this exists()
	 * @see \Illuminate\Support\Traits\Macroable::macroCall
	 * @method $this macroCall(string $method, array $parameters)
	 * @see \Illuminate\Database\Query\Builder::selectSub
	 * @method $this selectSub(\Closure|\Illuminate\Database\Query\Builder|string $query, string $as)
	 * @see \Illuminate\Database\Query\Builder::pluck
	 * @method $this pluck(string $column, null|string $key = null)
	 * @see \Illuminate\Database\Concerns\BuildsQueries::first
	 * @method $this first(array|string $columns = ['*'])
	 * @see \Illuminate\Database\Query\Builder::dd
	 * @method $this dd()
	 * @see \Illuminate\Database\Query\Builder::whereColumn
	 * @method $this whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::prepareValueAndOperator
	 * @method $this prepareValueAndOperator(string $value, string $operator, bool $useDefault = false)
	 * @see \Illuminate\Database\Query\Builder::whereNull
	 * @method $this whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::numericAggregate
	 * @method $this numericAggregate(string $function, array $columns = ['*'])
	 * @see \Illuminate\Database\Query\Builder::whereNotBetween
	 * @method $this whereNotBetween(string $column, array $values, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::getConnection
	 * @method $this getConnection()
	 * @see \Illuminate\Database\Query\Builder::mergeBindings
	 * @method $this mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @see \Illuminate\Database\Query\Builder::whereIntegerNotInRaw
	 * @method $this whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::orWhereRaw
	 * @method $this orWhereRaw(string $sql, $bindings = [])
	 * @see \Illuminate\Database\Query\Builder::orWhereJsonDoesntContain
	 * @method $this orWhereJsonDoesntContain(string $column, $value)
	 * @see \Illuminate\Database\Query\Builder::leftJoinSub
	 * @method $this leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|string $query, string $as, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::find
	 * @method $this find(int|string $id, array $columns = ['*'])
	 * @see \Illuminate\Database\Query\Builder::whereJsonContains
	 * @method $this whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::limit
	 * @method $this limit(int $value)
	 * @see \Illuminate\Database\Query\Builder::from
	 * @method $this from(\Closure|\Illuminate\Database\Query\Builder|string $table, null|string $as = null)
	 * @see \Illuminate\Database\Query\Builder::insertGetId
	 * @method $this insertGetId(array $values, null|string $sequence = null)
	 * @see \Illuminate\Database\Query\Builder::whereBetween
	 * @method $this whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Database\Query\Builder::mergeWheres
	 * @method $this mergeWheres(array $wheres, array $bindings)
	 * @see \Illuminate\Database\Query\Builder::sharedLock
	 * @method $this sharedLock()
	 * @see \Illuminate\Database\Query\Builder::orderByRaw
	 * @method $this orderByRaw(string $sql, array $bindings = [])
	 * @see \Illuminate\Database\Concerns\BuildsQueries::tap
	 * @method $this tap(callable $callback)
	 * @see \Illuminate\Database\Query\Builder::doesntExist
	 * @method $this doesntExist()
	 * @see \Illuminate\Database\Query\Builder::simplePaginate
	 * @method $this simplePaginate(int $perPage = 15, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
	 * @see \Illuminate\Database\Query\Builder::offset
	 * @method $this offset(int $value)
	 * @see \Illuminate\Database\Query\Builder::orWhereMonth
	 * @method $this orWhereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null)
	 * @see \Illuminate\Database\Query\Builder::whereNotNull
	 * @method $this whereNotNull(array|string $columns, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::count
	 * @method $this count(string $columns = '*')
	 * @see \Illuminate\Database\Query\Builder::orWhereNotBetween
	 * @method $this orWhereNotBetween(string $column, array $values)
	 * @see \Illuminate\Database\Query\Builder::fromRaw
	 * @method $this fromRaw(string $expression, $bindings = [])
	 * @see \Illuminate\Support\Traits\Macroable::mixin
	 * @method $this mixin(object $mixin, bool $replace = true)
	 * @see \Illuminate\Database\Query\Builder::take
	 * @method $this take(int $value)
	 * @see \Illuminate\Database\Query\Builder::updateOrInsert
	 * @method $this updateOrInsert(array $attributes, array $values = [])
	 * @see \Illuminate\Database\Query\Builder::addNestedWhereQuery
	 * @method $this addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::cursor
	 * @method $this cursor()
	 * @see \Illuminate\Database\Query\Builder::cloneWithout
	 * @method $this cloneWithout(array $properties)
	 * @see \Illuminate\Database\Query\Builder::fromSub
	 * @method $this fromSub(\Closure|\Illuminate\Database\Query\Builder|string $query, string $as)
	 * @see \Illuminate\Database\Query\Builder::rightJoin
	 * @method $this rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::leftJoin
	 * @method $this leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
	 * @see \Illuminate\Database\Query\Builder::update
	 * @method $this update(array $values)
	 * @see \Illuminate\Database\Query\Builder::insert
	 * @method $this insert(array $values)
	 * @see \Illuminate\Database\Query\Builder::distinct
	 * @method $this distinct()
	 * @see \Illuminate\Database\Concerns\BuildsQueries::chunk
	 * @method $this chunk(int $count, callable $callback)
	 * @see \Illuminate\Database\Query\Builder::whereYear
	 * @method $this whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::getCountForPagination
	 * @method $this getCountForPagination(array $columns = ['*'])
	 * @see \Illuminate\Database\Query\Builder::delete
	 * @method $this delete($id = null)
	 * @see \Illuminate\Database\Query\Builder::aggregate
	 * @method $this aggregate(string $function, array $columns = ['*'])
	 * @see \Illuminate\Database\Query\Builder::orWhereDate
	 * @method $this orWhereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null)
	 * @see \Illuminate\Database\Query\Builder::avg
	 * @method $this avg(string $column)
	 * @see \Illuminate\Database\Query\Builder::addBinding
	 * @method $this addBinding($value, string $type = 'where')
	 * @see \Illuminate\Database\Query\Builder::getGrammar
	 * @method $this getGrammar()
	 * @see \Illuminate\Database\Query\Builder::lockForUpdate
	 * @method $this lockForUpdate()
	 * @see \Illuminate\Database\Concerns\BuildsQueries::eachById
	 * @method $this eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
	 * @see \Illuminate\Database\Query\Builder::implode
	 * @method $this implode(string $column, string $glue = '')
	 * @see \Illuminate\Database\Query\Builder::dump
	 * @method $this dump()
	 * @see \Illuminate\Database\Query\Builder::value
	 * @method $this value(string $column)
	 * @see \Illuminate\Database\Query\Builder::cloneWithoutBindings
	 * @method $this cloneWithoutBindings(array $except)
	 * @see \Illuminate\Database\Query\Builder::addWhereExistsQuery
	 * @method $this addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean = 'and', bool $not = false)
	 * @see \Illuminate\Support\Traits\Macroable::macro
	 * @method $this macro(string $name, callable|object $macro)
	 * @see \Illuminate\Database\Query\Builder::whereRaw
	 * @method $this whereRaw(string $sql, $bindings = [], string $boolean = 'and')
	 * @see \Illuminate\Database\Query\Builder::toSql
	 * @method $this toSql()
	 * @see \Illuminate\Database\Query\Builder::orHaving
	 * @method $this orHaving(string $column, null|string $operator = null, null|string $value = null)
	 * @see \Illuminate\Database\Query\Builder::orHavingRaw
	 * @method $this orHavingRaw(string $sql, array $bindings = [])
	 * @see \Illuminate\Database\Query\Builder::getBindings
	 * @method $this getBindings()
	 * @see \Illuminate\Database\Query\Builder::forPageBeforeId
	 * @method $this forPageBeforeId(int $perPage = 15, int|null $lastId = 0, string $column = 'id')
	 * @see \Illuminate\Database\Query\Builder::orWhereTime
	 * @method $this orWhereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null)
	 * @see \Illuminate\Database\Query\Builder::orWhereBetween
	 * @method $this orWhereBetween(string $column, array $values)
	 * @see \Illuminate\Database\Query\Builder::orWhere
	 * @method $this orWhere(array|\Closure|string $column, $operator = null, $value = null)
	 * @see \Illuminate\Database\Query\Builder::dynamicWhere
	 * @method $this dynamicWhere(string $method, array $parameters)
	 */
	class _BaseBuilder extends Builder
	{
	}

	/**
	 * @method Collection mapSpread(callable $callback)
	 * @method Collection mapWithKeys(callable $callback)
	 * @method Collection zip(array $items)
	 * @method Collection partition(callable|string $key, $operator = null, $value = null)
	 * @method Collection mapInto(string $class)
	 * @method Collection mapToGroups(callable $callback)
	 * @method Collection map(callable $callback)
	 * @method Collection groupBy(array|callable|string $groupBy, bool $preserveKeys = false)
	 * @method Collection pluck(array|string $value, null|string $key = null)
	 * @method Collection pad(int $size, $value)
	 * @method Collection split(int $numberOfGroups)
	 * @method Collection combine($values)
	 * @method Collection countBy(callable|null $callback = null)
	 * @method Collection mapToDictionary(callable $callback)
	 * @method Collection keys()
	 * @method Collection transform(callable $callback)
	 * @method Collection flatMap(callable $callback)
	 * @method Collection collapse()
	 */
	class _BaseCollection extends Collection
	{
	}
}

namespace LaravelIdea\Helper\App {

	use App\Car;
	use App\CarModel;
	use App\CarModelCarType;
	use App\CarType;
	use App\City;
	use App\Contacts;
	use App\News;
	use App\Retarget;
	use App\Seo;
	use App\Stocks;
	use App\User;
	use Illuminate\Contracts\Support\Arrayable;
	use LaravelIdea\Helper\_BaseBuilder;
	use LaravelIdea\Helper\_BaseCollection;

	/**
	 * @method Car shift()
	 * @method Car pop()
	 * @method Car get($key, $default = null)
	 * @method Car pull($key, $default = null)
	 * @method Car first(callable $callback = null, $default = null)
	 * @method Car firstWhere(string $key, $operator = null, $value = null)
	 * @method Car[] all()
	 * @method Car last(callable $callback = null, $default = null)
	 */
	class _CarCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return Car[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method CarModelCarType shift()
	 * @method CarModelCarType pop()
	 * @method CarModelCarType get($key, $default = null)
	 * @method CarModelCarType pull($key, $default = null)
	 * @method CarModelCarType first(callable $callback = null, $default = null)
	 * @method CarModelCarType firstWhere(string $key, $operator = null, $value = null)
	 * @method CarModelCarType[] all()
	 * @method CarModelCarType last(callable $callback = null, $default = null)
	 */
	class _CarModelCarTypeCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return CarModelCarType[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _CarModelCarTypeQueryBuilder whereCarModelId($value)
	 * @method _CarModelCarTypeQueryBuilder whereCarTypeId($value)
	 * @method _CarModelCarTypeQueryBuilder wherePreview($value)
	 * @method _CarModelCarTypeQueryBuilder wherePrice($value)
	 * @method _CarModelCarTypeQueryBuilder whereSpecialPrice($value)
	 * @method _CarModelCarTypeQueryBuilder whereCount($value)
	 * @method _CarModelCarTypeQueryBuilder whereImage($value)
	 * @method _CarModelCarTypeQueryBuilder whereSlogan($value)
	 * @method _CarModelCarTypeQueryBuilder whereActive($value)
	 * @method CarModelCarType create(array $attributes = [])
	 * @method _CarModelCarTypeCollection|CarModelCarType[] cursor()
	 * @method CarModelCarType|null find($id, array $columns = ['*'])
	 * @method _CarModelCarTypeCollection|CarModelCarType[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method CarModelCarType findOrFail($id, array $columns = ['*'])
	 * @method _CarModelCarTypeCollection|CarModelCarType[] findOrNew($id, array $columns = ['*'])
	 * @method CarModelCarType first(array|string $columns = ['*'])
	 * @method CarModelCarType firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method CarModelCarType firstOrCreate(array $attributes, array $values = [])
	 * @method CarModelCarType firstOrFail(array $columns = ['*'])
	 * @method CarModelCarType firstOrNew(array $attributes, array $values = [])
	 * @method CarModelCarType firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method CarModelCarType forceCreate(array $attributes)
	 * @method _CarModelCarTypeCollection|CarModelCarType[] fromQuery(string $query, array $bindings = [])
	 * @method _CarModelCarTypeCollection|CarModelCarType[] get(array|string $columns = ['*'])
	 * @method CarModelCarType getModel()
	 * @method CarModelCarType[] getModels(array|string $columns = ['*'])
	 * @method _CarModelCarTypeCollection|CarModelCarType[] hydrate(array $items)
	 * @method CarModelCarType make(array $attributes = [])
	 * @method CarModelCarType newModelInstance(array $attributes = [])
	 * @method CarModelCarType updateOrCreate(array $attributes, array $values = [])
	 */
	class _CarModelCarTypeQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method CarModel shift()
	 * @method CarModel pop()
	 * @method CarModel get($key, $default = null)
	 * @method CarModel pull($key, $default = null)
	 * @method CarModel first(callable $callback = null, $default = null)
	 * @method CarModel firstWhere(string $key, $operator = null, $value = null)
	 * @method CarModel[] all()
	 * @method CarModel last(callable $callback = null, $default = null)
	 */
	class _CarModelCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return CarModel[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _CarModelQueryBuilder whereId($value)
	 * @method _CarModelQueryBuilder whereTitle($value)
	 * @method _CarModelQueryBuilder whereSlug($value)
	 * @method _CarModelQueryBuilder whereDescription($value)
	 * @method _CarModelQueryBuilder wherePreview($value)
	 * @method CarModel create(array $attributes = [])
	 * @method _CarModelCollection|CarModel[] cursor()
	 * @method CarModel|null find($id, array $columns = ['*'])
	 * @method _CarModelCollection|CarModel[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method CarModel findOrFail($id, array $columns = ['*'])
	 * @method _CarModelCollection|CarModel[] findOrNew($id, array $columns = ['*'])
	 * @method CarModel first(array|string $columns = ['*'])
	 * @method CarModel firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method CarModel firstOrCreate(array $attributes, array $values = [])
	 * @method CarModel firstOrFail(array $columns = ['*'])
	 * @method CarModel firstOrNew(array $attributes, array $values = [])
	 * @method CarModel firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method CarModel forceCreate(array $attributes)
	 * @method _CarModelCollection|CarModel[] fromQuery(string $query, array $bindings = [])
	 * @method _CarModelCollection|CarModel[] get(array|string $columns = ['*'])
	 * @method CarModel getModel()
	 * @method CarModel[] getModels(array|string $columns = ['*'])
	 * @method _CarModelCollection|CarModel[] hydrate(array $items)
	 * @method CarModel make(array $attributes = [])
	 * @method CarModel newModelInstance(array $attributes = [])
	 * @method CarModel updateOrCreate(array $attributes, array $values = [])
	 */
	class _CarModelQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method _CarQueryBuilder whereCarModelId($value)
	 * @method _CarQueryBuilder whereCarTypeId($value)
	 * @method _CarQueryBuilder wherePreview($value)
	 * @method _CarQueryBuilder wherePrice($value)
	 * @method _CarQueryBuilder whereSpecialPrice($value)
	 * @method _CarQueryBuilder whereCount($value)
	 * @method _CarQueryBuilder whereImage($value)
	 * @method _CarQueryBuilder whereSlogan($value)
	 * @method _CarQueryBuilder whereActive($value)
	 * @method Car create(array $attributes = [])
	 * @method _CarCollection|Car[] cursor()
	 * @method Car|null find($id, array $columns = ['*'])
	 * @method _CarCollection|Car[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method Car findOrFail($id, array $columns = ['*'])
	 * @method _CarCollection|Car[] findOrNew($id, array $columns = ['*'])
	 * @method Car first(array|string $columns = ['*'])
	 * @method Car firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method Car firstOrCreate(array $attributes, array $values = [])
	 * @method Car firstOrFail(array $columns = ['*'])
	 * @method Car firstOrNew(array $attributes, array $values = [])
	 * @method Car firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Car forceCreate(array $attributes)
	 * @method _CarCollection|Car[] fromQuery(string $query, array $bindings = [])
	 * @method _CarCollection|Car[] get(array|string $columns = ['*'])
	 * @method Car getModel()
	 * @method Car[] getModels(array|string $columns = ['*'])
	 * @method _CarCollection|Car[] hydrate(array $items)
	 * @method Car make(array $attributes = [])
	 * @method Car newModelInstance(array $attributes = [])
	 * @method Car updateOrCreate(array $attributes, array $values = [])
	 */
	class _CarQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method CarType shift()
	 * @method CarType pop()
	 * @method CarType get($key, $default = null)
	 * @method CarType pull($key, $default = null)
	 * @method CarType first(callable $callback = null, $default = null)
	 * @method CarType firstWhere(string $key, $operator = null, $value = null)
	 * @method CarType[] all()
	 * @method CarType last(callable $callback = null, $default = null)
	 */
	class _CarTypeCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return CarType[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _CarTypeQueryBuilder whereId($value)
	 * @method _CarTypeQueryBuilder whereTitleEn($value)
	 * @method _CarTypeQueryBuilder whereTitleRu($value)
	 * @method _CarTypeQueryBuilder whereSlug($value)
	 * @method CarType create(array $attributes = [])
	 * @method _CarTypeCollection|CarType[] cursor()
	 * @method CarType|null find($id, array $columns = ['*'])
	 * @method _CarTypeCollection|CarType[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method CarType findOrFail($id, array $columns = ['*'])
	 * @method _CarTypeCollection|CarType[] findOrNew($id, array $columns = ['*'])
	 * @method CarType first(array|string $columns = ['*'])
	 * @method CarType firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method CarType firstOrCreate(array $attributes, array $values = [])
	 * @method CarType firstOrFail(array $columns = ['*'])
	 * @method CarType firstOrNew(array $attributes, array $values = [])
	 * @method CarType firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method CarType forceCreate(array $attributes)
	 * @method _CarTypeCollection|CarType[] fromQuery(string $query, array $bindings = [])
	 * @method _CarTypeCollection|CarType[] get(array|string $columns = ['*'])
	 * @method CarType getModel()
	 * @method CarType[] getModels(array|string $columns = ['*'])
	 * @method _CarTypeCollection|CarType[] hydrate(array $items)
	 * @method CarType make(array $attributes = [])
	 * @method CarType newModelInstance(array $attributes = [])
	 * @method CarType updateOrCreate(array $attributes, array $values = [])
	 */
	class _CarTypeQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method City shift()
	 * @method City pop()
	 * @method City get($key, $default = null)
	 * @method City pull($key, $default = null)
	 * @method City first(callable $callback = null, $default = null)
	 * @method City firstWhere(string $key, $operator = null, $value = null)
	 * @method City[] all()
	 * @method City last(callable $callback = null, $default = null)
	 */
	class _CityCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return City[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _CityQueryBuilder whereId($value)
	 * @method _CityQueryBuilder whereTitleRu($value)
	 * @method _CityQueryBuilder whereTitleEn($value)
	 * @method _CityQueryBuilder whereAlias($value)
	 * @method _CityQueryBuilder whereCityDative($value)
	 * @method _CityQueryBuilder whereOpeningHours($value)
	 * @method _CityQueryBuilder whereCallbackEmails($value)
	 * @method _CityQueryBuilder whereCallbackServiceEmails($value)
	 * @method _CityQueryBuilder whereCoordinates($value)
	 * @method _CityQueryBuilder whereJivositeToken($value)
	 * @method _CityQueryBuilder whereOpenScript($value)
	 * @method _CityQueryBuilder whereBeginScript($value)
	 * @method _CityQueryBuilder whereEndScript($value)
	 * @method _CityQueryBuilder whereBitrixResponsibleId($value)
	 * @method City create(array $attributes = [])
	 * @method _CityCollection|City[] cursor()
	 * @method City|null find($id, array $columns = ['*'])
	 * @method _CityCollection|City[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method City findOrFail($id, array $columns = ['*'])
	 * @method _CityCollection|City[] findOrNew($id, array $columns = ['*'])
	 * @method City first(array|string $columns = ['*'])
	 * @method City firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method City firstOrCreate(array $attributes, array $values = [])
	 * @method City firstOrFail(array $columns = ['*'])
	 * @method City firstOrNew(array $attributes, array $values = [])
	 * @method City firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method City forceCreate(array $attributes)
	 * @method _CityCollection|City[] fromQuery(string $query, array $bindings = [])
	 * @method _CityCollection|City[] get(array|string $columns = ['*'])
	 * @method City getModel()
	 * @method City[] getModels(array|string $columns = ['*'])
	 * @method _CityCollection|City[] hydrate(array $items)
	 * @method City make(array $attributes = [])
	 * @method City newModelInstance(array $attributes = [])
	 * @method City updateOrCreate(array $attributes, array $values = [])
	 */
	class _CityQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method Contacts shift()
	 * @method Contacts pop()
	 * @method Contacts get($key, $default = null)
	 * @method Contacts pull($key, $default = null)
	 * @method Contacts first(callable $callback = null, $default = null)
	 * @method Contacts firstWhere(string $key, $operator = null, $value = null)
	 * @method Contacts[] all()
	 * @method Contacts last(callable $callback = null, $default = null)
	 */
	class _ContactsCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return Contacts[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _ContactsQueryBuilder whereId($value)
	 * @method _ContactsQueryBuilder whereCityId($value)
	 * @method _ContactsQueryBuilder whereAddress($value)
	 * @method _ContactsQueryBuilder wherePhone($value)
	 * @method _ContactsQueryBuilder whereEmail($value)
	 * @method _ContactsQueryBuilder whereFbUrl($value)
	 * @method _ContactsQueryBuilder whereInstagramUrl($value)
	 * @method _ContactsQueryBuilder whereVkUrl($value)
	 * @method _ContactsQueryBuilder whereYoutubeUrl($value)
	 * @method _ContactsQueryBuilder whereOkUrl($value)
	 * @method Contacts create(array $attributes = [])
	 * @method _ContactsCollection|Contacts[] cursor()
	 * @method Contacts|null find($id, array $columns = ['*'])
	 * @method _ContactsCollection|Contacts[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method Contacts findOrFail($id, array $columns = ['*'])
	 * @method _ContactsCollection|Contacts[] findOrNew($id, array $columns = ['*'])
	 * @method Contacts first(array|string $columns = ['*'])
	 * @method Contacts firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method Contacts firstOrCreate(array $attributes, array $values = [])
	 * @method Contacts firstOrFail(array $columns = ['*'])
	 * @method Contacts firstOrNew(array $attributes, array $values = [])
	 * @method Contacts firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Contacts forceCreate(array $attributes)
	 * @method _ContactsCollection|Contacts[] fromQuery(string $query, array $bindings = [])
	 * @method _ContactsCollection|Contacts[] get(array|string $columns = ['*'])
	 * @method Contacts getModel()
	 * @method Contacts[] getModels(array|string $columns = ['*'])
	 * @method _ContactsCollection|Contacts[] hydrate(array $items)
	 * @method Contacts make(array $attributes = [])
	 * @method Contacts newModelInstance(array $attributes = [])
	 * @method Contacts updateOrCreate(array $attributes, array $values = [])
	 */
	class _ContactsQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method News shift()
	 * @method News pop()
	 * @method News get($key, $default = null)
	 * @method News pull($key, $default = null)
	 * @method News first(callable $callback = null, $default = null)
	 * @method News firstWhere(string $key, $operator = null, $value = null)
	 * @method News[] all()
	 * @method News last(callable $callback = null, $default = null)
	 */
	class _NewsCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return News[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _NewsQueryBuilder whereId($value)
	 * @method _NewsQueryBuilder whereTitle($value)
	 * @method _NewsQueryBuilder whereText($value)
	 * @method _NewsQueryBuilder whereTextShort($value)
	 * @method _NewsQueryBuilder wherePreview($value)
	 * @method _NewsQueryBuilder whereSlug($value)
	 * @method _NewsQueryBuilder whereCityId($value)
	 * @method News create(array $attributes = [])
	 * @method _NewsCollection|News[] cursor()
	 * @method News|null find($id, array $columns = ['*'])
	 * @method _NewsCollection|News[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method News findOrFail($id, array $columns = ['*'])
	 * @method _NewsCollection|News[] findOrNew($id, array $columns = ['*'])
	 * @method News first(array|string $columns = ['*'])
	 * @method News firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method News firstOrCreate(array $attributes, array $values = [])
	 * @method News firstOrFail(array $columns = ['*'])
	 * @method News firstOrNew(array $attributes, array $values = [])
	 * @method News firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method News forceCreate(array $attributes)
	 * @method _NewsCollection|News[] fromQuery(string $query, array $bindings = [])
	 * @method _NewsCollection|News[] get(array|string $columns = ['*'])
	 * @method News getModel()
	 * @method News[] getModels(array|string $columns = ['*'])
	 * @method _NewsCollection|News[] hydrate(array $items)
	 * @method News make(array $attributes = [])
	 * @method News newModelInstance(array $attributes = [])
	 * @method News updateOrCreate(array $attributes, array $values = [])
	 */
	class _NewsQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method Retarget shift()
	 * @method Retarget pop()
	 * @method Retarget get($key, $default = null)
	 * @method Retarget pull($key, $default = null)
	 * @method Retarget first(callable $callback = null, $default = null)
	 * @method Retarget firstWhere(string $key, $operator = null, $value = null)
	 * @method Retarget[] all()
	 * @method Retarget last(callable $callback = null, $default = null)
	 */
	class _RetargetCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return Retarget[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _RetargetQueryBuilder whereId($value)
	 * @method _RetargetQueryBuilder whereStartDate($value)
	 * @method _RetargetQueryBuilder whereEndDate($value)
	 * @method _RetargetQueryBuilder whereDate($value)
	 * @method _RetargetQueryBuilder whereImgMobile($value)
	 * @method _RetargetQueryBuilder whereImgTablet($value)
	 * @method _RetargetQueryBuilder whereImgDesktop($value)
	 * @method _RetargetQueryBuilder whereTitle($value)
	 * @method _RetargetQueryBuilder whereDescription($value)
	 * @method _RetargetQueryBuilder whereCount($value)
	 * @method _RetargetQueryBuilder whereIsActive($value)
	 * @method _RetargetQueryBuilder whereCityId($value)
	 * @method _RetargetQueryBuilder whereCarModelId($value)
	 * @method _RetargetQueryBuilder whereCarTypeId($value)
	 * @method _RetargetQueryBuilder whereUtmTags($value)
	 * @method Retarget create(array $attributes = [])
	 * @method _RetargetCollection|Retarget[] cursor()
	 * @method Retarget|null find($id, array $columns = ['*'])
	 * @method _RetargetCollection|Retarget[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method Retarget findOrFail($id, array $columns = ['*'])
	 * @method _RetargetCollection|Retarget[] findOrNew($id, array $columns = ['*'])
	 * @method Retarget first(array|string $columns = ['*'])
	 * @method Retarget firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method Retarget firstOrCreate(array $attributes, array $values = [])
	 * @method Retarget firstOrFail(array $columns = ['*'])
	 * @method Retarget firstOrNew(array $attributes, array $values = [])
	 * @method Retarget firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Retarget forceCreate(array $attributes)
	 * @method _RetargetCollection|Retarget[] fromQuery(string $query, array $bindings = [])
	 * @method _RetargetCollection|Retarget[] get(array|string $columns = ['*'])
	 * @method Retarget getModel()
	 * @method Retarget[] getModels(array|string $columns = ['*'])
	 * @method _RetargetCollection|Retarget[] hydrate(array $items)
	 * @method Retarget make(array $attributes = [])
	 * @method Retarget newModelInstance(array $attributes = [])
	 * @method Retarget updateOrCreate(array $attributes, array $values = [])
	 */
	class _RetargetQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method Seo shift()
	 * @method Seo pop()
	 * @method Seo get($key, $default = null)
	 * @method Seo pull($key, $default = null)
	 * @method Seo first(callable $callback = null, $default = null)
	 * @method Seo firstWhere(string $key, $operator = null, $value = null)
	 * @method Seo[] all()
	 * @method Seo last(callable $callback = null, $default = null)
	 */
	class _SeoCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return Seo[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _SeoQueryBuilder whereId($value)
	 * @method _SeoQueryBuilder whereUrl($value)
	 * @method _SeoQueryBuilder whereTitle($value)
	 * @method _SeoQueryBuilder whereHeader($value)
	 * @method _SeoQueryBuilder whereDescription($value)
	 * @method _SeoQueryBuilder whereOgLocale($value)
	 * @method _SeoQueryBuilder whereOgType($value)
	 * @method _SeoQueryBuilder whereOgTitle($value)
	 * @method _SeoQueryBuilder whereOgDescription($value)
	 * @method _SeoQueryBuilder whereOgUrl($value)
	 * @method _SeoQueryBuilder whereOgImage($value)
	 * @method Seo create(array $attributes = [])
	 * @method _SeoCollection|Seo[] cursor()
	 * @method Seo|null find($id, array $columns = ['*'])
	 * @method _SeoCollection|Seo[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method Seo findOrFail($id, array $columns = ['*'])
	 * @method _SeoCollection|Seo[] findOrNew($id, array $columns = ['*'])
	 * @method Seo first(array|string $columns = ['*'])
	 * @method Seo firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method Seo firstOrCreate(array $attributes, array $values = [])
	 * @method Seo firstOrFail(array $columns = ['*'])
	 * @method Seo firstOrNew(array $attributes, array $values = [])
	 * @method Seo firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Seo forceCreate(array $attributes)
	 * @method _SeoCollection|Seo[] fromQuery(string $query, array $bindings = [])
	 * @method _SeoCollection|Seo[] get(array|string $columns = ['*'])
	 * @method Seo getModel()
	 * @method Seo[] getModels(array|string $columns = ['*'])
	 * @method _SeoCollection|Seo[] hydrate(array $items)
	 * @method Seo make(array $attributes = [])
	 * @method Seo newModelInstance(array $attributes = [])
	 * @method Seo updateOrCreate(array $attributes, array $values = [])
	 */
	class _SeoQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method Stocks shift()
	 * @method Stocks pop()
	 * @method Stocks get($key, $default = null)
	 * @method Stocks pull($key, $default = null)
	 * @method Stocks first(callable $callback = null, $default = null)
	 * @method Stocks firstWhere(string $key, $operator = null, $value = null)
	 * @method Stocks[] all()
	 * @method Stocks last(callable $callback = null, $default = null)
	 */
	class _StocksCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return Stocks[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _StocksQueryBuilder whereId($value)
	 * @method _StocksQueryBuilder whereTitle($value)
	 * @method _StocksQueryBuilder whereText($value)
	 * @method _StocksQueryBuilder whereTextShort($value)
	 * @method _StocksQueryBuilder wherePreview($value)
	 * @method _StocksQueryBuilder whereSlug($value)
	 * @method _StocksQueryBuilder whereCityId($value)
	 * @method _StocksQueryBuilder whereSort($value)
	 * @method Stocks create(array $attributes = [])
	 * @method _StocksCollection|Stocks[] cursor()
	 * @method Stocks|null find($id, array $columns = ['*'])
	 * @method _StocksCollection|Stocks[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method Stocks findOrFail($id, array $columns = ['*'])
	 * @method _StocksCollection|Stocks[] findOrNew($id, array $columns = ['*'])
	 * @method Stocks first(array|string $columns = ['*'])
	 * @method Stocks firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method Stocks firstOrCreate(array $attributes, array $values = [])
	 * @method Stocks firstOrFail(array $columns = ['*'])
	 * @method Stocks firstOrNew(array $attributes, array $values = [])
	 * @method Stocks firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Stocks forceCreate(array $attributes)
	 * @method _StocksCollection|Stocks[] fromQuery(string $query, array $bindings = [])
	 * @method _StocksCollection|Stocks[] get(array|string $columns = ['*'])
	 * @method Stocks getModel()
	 * @method Stocks[] getModels(array|string $columns = ['*'])
	 * @method _StocksCollection|Stocks[] hydrate(array $items)
	 * @method Stocks make(array $attributes = [])
	 * @method Stocks newModelInstance(array $attributes = [])
	 * @method Stocks updateOrCreate(array $attributes, array $values = [])
	 */
	class _StocksQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method User shift()
	 * @method User pop()
	 * @method User get($key, $default = null)
	 * @method User pull($key, $default = null)
	 * @method User first(callable $callback = null, $default = null)
	 * @method User firstWhere(string $key, $operator = null, $value = null)
	 * @method User[] all()
	 * @method User last(callable $callback = null, $default = null)
	 */
	class _UserCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return User[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _UserQueryBuilder whereId($value)
	 * @method _UserQueryBuilder whereName($value)
	 * @method _UserQueryBuilder whereEmail($value)
	 * @method _UserQueryBuilder whereEmailVerifiedAt($value)
	 * @method _UserQueryBuilder wherePassword($value)
	 * @method _UserQueryBuilder whereRememberToken($value)
	 * @method _UserQueryBuilder whereCreatedAt($value)
	 * @method _UserQueryBuilder whereUpdatedAt($value)
	 * @method User create(array $attributes = [])
	 * @method _UserCollection|User[] cursor()
	 * @method User|null find($id, array $columns = ['*'])
	 * @method _UserCollection|User[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method User findOrFail($id, array $columns = ['*'])
	 * @method _UserCollection|User[] findOrNew($id, array $columns = ['*'])
	 * @method User first(array|string $columns = ['*'])
	 * @method User firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method User firstOrCreate(array $attributes, array $values = [])
	 * @method User firstOrFail(array $columns = ['*'])
	 * @method User firstOrNew(array $attributes, array $values = [])
	 * @method User firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method User forceCreate(array $attributes)
	 * @method _UserCollection|User[] fromQuery(string $query, array $bindings = [])
	 * @method _UserCollection|User[] get(array|string $columns = ['*'])
	 * @method User getModel()
	 * @method User[] getModels(array|string $columns = ['*'])
	 * @method _UserCollection|User[] hydrate(array $items)
	 * @method User make(array $attributes = [])
	 * @method User newModelInstance(array $attributes = [])
	 * @method User updateOrCreate(array $attributes, array $values = [])
	 */
	class _UserQueryBuilder extends _BaseBuilder
	{
	}
}

namespace LaravelIdea\Helper\Cviebrock\EloquentSluggable\Tests\Models {

	use Cviebrock\EloquentSluggable\Tests\Models\Author;
	use Cviebrock\EloquentSluggable\Tests\Models\Post;
	use Cviebrock\EloquentSluggable\Tests\Models\PostNotSluggable;
	use Cviebrock\EloquentSluggable\Tests\Models\PostShortConfig;
	use Cviebrock\EloquentSluggable\Tests\Models\PostShortConfigWithScopeHelpers;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithCustomCallableMethod;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithCustomEngine2;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithCustomEngine;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithCustomMethod;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithCustomSeparator;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithCustomSource;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithCustomSuffix;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithEmptySeparator;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithForeignRuleset;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithIncludeTrashed;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithMaxLength;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithMaxLengthSplitWords;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithMultipleSlugs;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithMultipleSlugsAndCustomSlugKey;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithMultipleSlugsAndHelperTrait;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithMultipleSources;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithNoSource;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithOnUpdate;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithRelation;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithReservedSlug;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithSoftDeleting;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithSoftDeletingIncludeTrashed;
	use Cviebrock\EloquentSluggable\Tests\Models\PostWithUniqueSlugConstraints;
	use Illuminate\Contracts\Support\Arrayable;
	use Illuminate\Database\Eloquent\Model;
	use LaravelIdea\Helper\_BaseBuilder;
	use LaravelIdea\Helper\_BaseCollection;

	/**
	 * @method Author shift()
	 * @method Author pop()
	 * @method Author get($key, $default = null)
	 * @method Author pull($key, $default = null)
	 * @method Author first(callable $callback = null, $default = null)
	 * @method Author firstWhere(string $key, $operator = null, $value = null)
	 * @method Author[] all()
	 * @method Author last(callable $callback = null, $default = null)
	 */
	class _AuthorCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return Author[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _AuthorQueryBuilder whereId($value)
	 * @method _AuthorQueryBuilder whereName($value)
	 * @method Author create(array $attributes = [])
	 * @method _AuthorCollection|Author[] cursor()
	 * @method Author|null find($id, array $columns = ['*'])
	 * @method _AuthorCollection|Author[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method Author findOrFail($id, array $columns = ['*'])
	 * @method _AuthorCollection|Author[] findOrNew($id, array $columns = ['*'])
	 * @method Author first(array|string $columns = ['*'])
	 * @method Author firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method Author firstOrCreate(array $attributes, array $values = [])
	 * @method Author firstOrFail(array $columns = ['*'])
	 * @method Author firstOrNew(array $attributes, array $values = [])
	 * @method Author firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Author forceCreate(array $attributes)
	 * @method _AuthorCollection|Author[] fromQuery(string $query, array $bindings = [])
	 * @method _AuthorCollection|Author[] get(array|string $columns = ['*'])
	 * @method Author getModel()
	 * @method Author[] getModels(array|string $columns = ['*'])
	 * @method _AuthorCollection|Author[] hydrate(array $items)
	 * @method Author make(array $attributes = [])
	 * @method Author newModelInstance(array $attributes = [])
	 * @method Author updateOrCreate(array $attributes, array $values = [])
	 */
	class _AuthorQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method Post shift()
	 * @method Post pop()
	 * @method Post get($key, $default = null)
	 * @method Post pull($key, $default = null)
	 * @method Post first(callable $callback = null, $default = null)
	 * @method Post firstWhere(string $key, $operator = null, $value = null)
	 * @method Post[] all()
	 * @method Post last(callable $callback = null, $default = null)
	 */
	class _PostCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return Post[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostNotSluggable shift()
	 * @method PostNotSluggable pop()
	 * @method PostNotSluggable get($key, $default = null)
	 * @method PostNotSluggable pull($key, $default = null)
	 * @method PostNotSluggable first(callable $callback = null, $default = null)
	 * @method PostNotSluggable firstWhere(string $key, $operator = null, $value = null)
	 * @method PostNotSluggable[] all()
	 * @method PostNotSluggable last(callable $callback = null, $default = null)
	 */
	class _PostNotSluggableCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostNotSluggable[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method _PostNotSluggableQueryBuilder whereId($value)
	 * @method _PostNotSluggableQueryBuilder whereTitle($value)
	 * @method _PostNotSluggableQueryBuilder whereSubtitle($value)
	 * @method _PostNotSluggableQueryBuilder whereSlug($value)
	 * @method _PostNotSluggableQueryBuilder whereDummy($value)
	 * @method _PostNotSluggableQueryBuilder whereAuthorId($value)
	 * @method _PostNotSluggableQueryBuilder whereDeletedAt($value)
	 * @method PostNotSluggable create(array $attributes = [])
	 * @method _PostNotSluggableCollection|PostNotSluggable[] cursor()
	 * @method PostNotSluggable|null find($id, array $columns = ['*'])
	 * @method _PostNotSluggableCollection|PostNotSluggable[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostNotSluggable findOrFail($id, array $columns = ['*'])
	 * @method _PostNotSluggableCollection|PostNotSluggable[] findOrNew($id, array $columns = ['*'])
	 * @method PostNotSluggable first(array|string $columns = ['*'])
	 * @method PostNotSluggable firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostNotSluggable firstOrCreate(array $attributes, array $values = [])
	 * @method PostNotSluggable firstOrFail(array $columns = ['*'])
	 * @method PostNotSluggable firstOrNew(array $attributes, array $values = [])
	 * @method PostNotSluggable firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostNotSluggable forceCreate(array $attributes)
	 * @method _PostNotSluggableCollection|PostNotSluggable[] fromQuery(string $query, array $bindings = [])
	 * @method _PostNotSluggableCollection|PostNotSluggable[] get(array|string $columns = ['*'])
	 * @method PostNotSluggable getModel()
	 * @method PostNotSluggable[] getModels(array|string $columns = ['*'])
	 * @method _PostNotSluggableCollection|PostNotSluggable[] hydrate(array $items)
	 * @method PostNotSluggable make(array $attributes = [])
	 * @method PostNotSluggable newModelInstance(array $attributes = [])
	 * @method PostNotSluggable updateOrCreate(array $attributes, array $values = [])
	 */
	class _PostNotSluggableQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method _PostQueryBuilder whereId($value)
	 * @method _PostQueryBuilder whereTitle($value)
	 * @method _PostQueryBuilder whereSubtitle($value)
	 * @method _PostQueryBuilder whereSlug($value)
	 * @method _PostQueryBuilder whereDummy($value)
	 * @method _PostQueryBuilder whereAuthorId($value)
	 * @method _PostQueryBuilder whereDeletedAt($value)
	 * @method Post create(array $attributes = [])
	 * @method _PostCollection|Post[] cursor()
	 * @method Post|null find($id, array $columns = ['*'])
	 * @method _PostCollection|Post[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method Post findOrFail($id, array $columns = ['*'])
	 * @method _PostCollection|Post[] findOrNew($id, array $columns = ['*'])
	 * @method Post first(array|string $columns = ['*'])
	 * @method Post firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method Post firstOrCreate(array $attributes, array $values = [])
	 * @method Post firstOrFail(array $columns = ['*'])
	 * @method Post firstOrNew(array $attributes, array $values = [])
	 * @method Post firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method Post forceCreate(array $attributes)
	 * @method _PostCollection|Post[] fromQuery(string $query, array $bindings = [])
	 * @method _PostCollection|Post[] get(array|string $columns = ['*'])
	 * @method Post getModel()
	 * @method Post[] getModels(array|string $columns = ['*'])
	 * @method _PostCollection|Post[] hydrate(array $items)
	 * @method Post make(array $attributes = [])
	 * @method Post newModelInstance(array $attributes = [])
	 * @method Post updateOrCreate(array $attributes, array $values = [])
	 * @method _PostQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostShortConfig shift()
	 * @method PostShortConfig pop()
	 * @method PostShortConfig get($key, $default = null)
	 * @method PostShortConfig pull($key, $default = null)
	 * @method PostShortConfig first(callable $callback = null, $default = null)
	 * @method PostShortConfig firstWhere(string $key, $operator = null, $value = null)
	 * @method PostShortConfig[] all()
	 * @method PostShortConfig last(callable $callback = null, $default = null)
	 */
	class _PostShortConfigCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostShortConfig[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostShortConfig create(array $attributes = [])
	 * @method _PostShortConfigCollection|PostShortConfig[] cursor()
	 * @method PostShortConfig|null find($id, array $columns = ['*'])
	 * @method _PostShortConfigCollection|PostShortConfig[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostShortConfig findOrFail($id, array $columns = ['*'])
	 * @method _PostShortConfigCollection|PostShortConfig[] findOrNew($id, array $columns = ['*'])
	 * @method PostShortConfig first(array|string $columns = ['*'])
	 * @method PostShortConfig firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostShortConfig firstOrCreate(array $attributes, array $values = [])
	 * @method PostShortConfig firstOrFail(array $columns = ['*'])
	 * @method PostShortConfig firstOrNew(array $attributes, array $values = [])
	 * @method PostShortConfig firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostShortConfig forceCreate(array $attributes)
	 * @method _PostShortConfigCollection|PostShortConfig[] fromQuery(string $query, array $bindings = [])
	 * @method _PostShortConfigCollection|PostShortConfig[] get(array|string $columns = ['*'])
	 * @method PostShortConfig getModel()
	 * @method PostShortConfig[] getModels(array|string $columns = ['*'])
	 * @method _PostShortConfigCollection|PostShortConfig[] hydrate(array $items)
	 * @method PostShortConfig make(array $attributes = [])
	 * @method PostShortConfig newModelInstance(array $attributes = [])
	 * @method PostShortConfig updateOrCreate(array $attributes, array $values = [])
	 * @method _PostShortConfigQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostShortConfigQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostShortConfigWithScopeHelpers shift()
	 * @method PostShortConfigWithScopeHelpers pop()
	 * @method PostShortConfigWithScopeHelpers get($key, $default = null)
	 * @method PostShortConfigWithScopeHelpers pull($key, $default = null)
	 * @method PostShortConfigWithScopeHelpers first(callable $callback = null, $default = null)
	 * @method PostShortConfigWithScopeHelpers firstWhere(string $key, $operator = null, $value = null)
	 * @method PostShortConfigWithScopeHelpers[] all()
	 * @method PostShortConfigWithScopeHelpers last(callable $callback = null, $default = null)
	 */
	class _PostShortConfigWithScopeHelpersCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostShortConfigWithScopeHelpers[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostShortConfigWithScopeHelpers create(array $attributes = [])
	 * @method _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] cursor()
	 * @method PostShortConfigWithScopeHelpers|null find($id, array $columns = ['*'])
	 * @method _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostShortConfigWithScopeHelpers findOrFail($id, array $columns = ['*'])
	 * @method _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] findOrNew($id, array $columns = ['*'])
	 * @method PostShortConfigWithScopeHelpers first(array|string $columns = ['*'])
	 * @method PostShortConfigWithScopeHelpers firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostShortConfigWithScopeHelpers firstOrCreate(array $attributes, array $values = [])
	 * @method PostShortConfigWithScopeHelpers firstOrFail(array $columns = ['*'])
	 * @method PostShortConfigWithScopeHelpers firstOrNew(array $attributes, array $values = [])
	 * @method PostShortConfigWithScopeHelpers firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostShortConfigWithScopeHelpers forceCreate(array $attributes)
	 * @method _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] fromQuery(string $query, array $bindings = [])
	 * @method _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] get(array|string $columns = ['*'])
	 * @method PostShortConfigWithScopeHelpers getModel()
	 * @method PostShortConfigWithScopeHelpers[] getModels(array|string $columns = ['*'])
	 * @method _PostShortConfigWithScopeHelpersCollection|PostShortConfigWithScopeHelpers[] hydrate(array $items)
	 * @method PostShortConfigWithScopeHelpers make(array $attributes = [])
	 * @method PostShortConfigWithScopeHelpers newModelInstance(array $attributes = [])
	 * @method PostShortConfigWithScopeHelpers updateOrCreate(array $attributes, array $values = [])
	 * @method _PostShortConfigWithScopeHelpersQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 * @method _PostShortConfigWithScopeHelpersQueryBuilder whereSlug(string $slug)
	 */
	class _PostShortConfigWithScopeHelpersQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithCustomCallableMethod shift()
	 * @method PostWithCustomCallableMethod pop()
	 * @method PostWithCustomCallableMethod get($key, $default = null)
	 * @method PostWithCustomCallableMethod pull($key, $default = null)
	 * @method PostWithCustomCallableMethod first(callable $callback = null, $default = null)
	 * @method PostWithCustomCallableMethod firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithCustomCallableMethod[] all()
	 * @method PostWithCustomCallableMethod last(callable $callback = null, $default = null)
	 */
	class _PostWithCustomCallableMethodCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithCustomCallableMethod[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithCustomCallableMethod create(array $attributes = [])
	 * @method _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] cursor()
	 * @method PostWithCustomCallableMethod|null find($id, array $columns = ['*'])
	 * @method _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithCustomCallableMethod findOrFail($id, array $columns = ['*'])
	 * @method _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithCustomCallableMethod first(array|string $columns = ['*'])
	 * @method PostWithCustomCallableMethod firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithCustomCallableMethod firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithCustomCallableMethod firstOrFail(array $columns = ['*'])
	 * @method PostWithCustomCallableMethod firstOrNew(array $attributes, array $values = [])
	 * @method PostWithCustomCallableMethod firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithCustomCallableMethod forceCreate(array $attributes)
	 * @method _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] get(array|string $columns = ['*'])
	 * @method PostWithCustomCallableMethod getModel()
	 * @method PostWithCustomCallableMethod[] getModels(array|string $columns = ['*'])
	 * @method _PostWithCustomCallableMethodCollection|PostWithCustomCallableMethod[] hydrate(array $items)
	 * @method PostWithCustomCallableMethod make(array $attributes = [])
	 * @method PostWithCustomCallableMethod newModelInstance(array $attributes = [])
	 * @method PostWithCustomCallableMethod updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithCustomCallableMethodQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithCustomCallableMethodQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithCustomEngine2 shift()
	 * @method PostWithCustomEngine2 pop()
	 * @method PostWithCustomEngine2 get($key, $default = null)
	 * @method PostWithCustomEngine2 pull($key, $default = null)
	 * @method PostWithCustomEngine2 first(callable $callback = null, $default = null)
	 * @method PostWithCustomEngine2 firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithCustomEngine2[] all()
	 * @method PostWithCustomEngine2 last(callable $callback = null, $default = null)
	 */
	class _PostWithCustomEngine2Collection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithCustomEngine2[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithCustomEngine2 create(array $attributes = [])
	 * @method _PostWithCustomEngine2Collection|PostWithCustomEngine2[] cursor()
	 * @method PostWithCustomEngine2|null find($id, array $columns = ['*'])
	 * @method _PostWithCustomEngine2Collection|PostWithCustomEngine2[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithCustomEngine2 findOrFail($id, array $columns = ['*'])
	 * @method _PostWithCustomEngine2Collection|PostWithCustomEngine2[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithCustomEngine2 first(array|string $columns = ['*'])
	 * @method PostWithCustomEngine2 firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithCustomEngine2 firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithCustomEngine2 firstOrFail(array $columns = ['*'])
	 * @method PostWithCustomEngine2 firstOrNew(array $attributes, array $values = [])
	 * @method PostWithCustomEngine2 firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithCustomEngine2 forceCreate(array $attributes)
	 * @method _PostWithCustomEngine2Collection|PostWithCustomEngine2[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithCustomEngine2Collection|PostWithCustomEngine2[] get(array|string $columns = ['*'])
	 * @method PostWithCustomEngine2 getModel()
	 * @method PostWithCustomEngine2[] getModels(array|string $columns = ['*'])
	 * @method _PostWithCustomEngine2Collection|PostWithCustomEngine2[] hydrate(array $items)
	 * @method PostWithCustomEngine2 make(array $attributes = [])
	 * @method PostWithCustomEngine2 newModelInstance(array $attributes = [])
	 * @method PostWithCustomEngine2 updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithCustomEngine2QueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithCustomEngine2QueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithCustomEngine shift()
	 * @method PostWithCustomEngine pop()
	 * @method PostWithCustomEngine get($key, $default = null)
	 * @method PostWithCustomEngine pull($key, $default = null)
	 * @method PostWithCustomEngine first(callable $callback = null, $default = null)
	 * @method PostWithCustomEngine firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithCustomEngine[] all()
	 * @method PostWithCustomEngine last(callable $callback = null, $default = null)
	 */
	class _PostWithCustomEngineCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithCustomEngine[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithCustomEngine create(array $attributes = [])
	 * @method _PostWithCustomEngineCollection|PostWithCustomEngine[] cursor()
	 * @method PostWithCustomEngine|null find($id, array $columns = ['*'])
	 * @method _PostWithCustomEngineCollection|PostWithCustomEngine[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithCustomEngine findOrFail($id, array $columns = ['*'])
	 * @method _PostWithCustomEngineCollection|PostWithCustomEngine[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithCustomEngine first(array|string $columns = ['*'])
	 * @method PostWithCustomEngine firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithCustomEngine firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithCustomEngine firstOrFail(array $columns = ['*'])
	 * @method PostWithCustomEngine firstOrNew(array $attributes, array $values = [])
	 * @method PostWithCustomEngine firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithCustomEngine forceCreate(array $attributes)
	 * @method _PostWithCustomEngineCollection|PostWithCustomEngine[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithCustomEngineCollection|PostWithCustomEngine[] get(array|string $columns = ['*'])
	 * @method PostWithCustomEngine getModel()
	 * @method PostWithCustomEngine[] getModels(array|string $columns = ['*'])
	 * @method _PostWithCustomEngineCollection|PostWithCustomEngine[] hydrate(array $items)
	 * @method PostWithCustomEngine make(array $attributes = [])
	 * @method PostWithCustomEngine newModelInstance(array $attributes = [])
	 * @method PostWithCustomEngine updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithCustomEngineQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithCustomEngineQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithCustomMethod shift()
	 * @method PostWithCustomMethod pop()
	 * @method PostWithCustomMethod get($key, $default = null)
	 * @method PostWithCustomMethod pull($key, $default = null)
	 * @method PostWithCustomMethod first(callable $callback = null, $default = null)
	 * @method PostWithCustomMethod firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithCustomMethod[] all()
	 * @method PostWithCustomMethod last(callable $callback = null, $default = null)
	 */
	class _PostWithCustomMethodCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithCustomMethod[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithCustomMethod create(array $attributes = [])
	 * @method _PostWithCustomMethodCollection|PostWithCustomMethod[] cursor()
	 * @method PostWithCustomMethod|null find($id, array $columns = ['*'])
	 * @method _PostWithCustomMethodCollection|PostWithCustomMethod[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithCustomMethod findOrFail($id, array $columns = ['*'])
	 * @method _PostWithCustomMethodCollection|PostWithCustomMethod[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithCustomMethod first(array|string $columns = ['*'])
	 * @method PostWithCustomMethod firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithCustomMethod firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithCustomMethod firstOrFail(array $columns = ['*'])
	 * @method PostWithCustomMethod firstOrNew(array $attributes, array $values = [])
	 * @method PostWithCustomMethod firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithCustomMethod forceCreate(array $attributes)
	 * @method _PostWithCustomMethodCollection|PostWithCustomMethod[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithCustomMethodCollection|PostWithCustomMethod[] get(array|string $columns = ['*'])
	 * @method PostWithCustomMethod getModel()
	 * @method PostWithCustomMethod[] getModels(array|string $columns = ['*'])
	 * @method _PostWithCustomMethodCollection|PostWithCustomMethod[] hydrate(array $items)
	 * @method PostWithCustomMethod make(array $attributes = [])
	 * @method PostWithCustomMethod newModelInstance(array $attributes = [])
	 * @method PostWithCustomMethod updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithCustomMethodQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithCustomMethodQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithCustomSeparator shift()
	 * @method PostWithCustomSeparator pop()
	 * @method PostWithCustomSeparator get($key, $default = null)
	 * @method PostWithCustomSeparator pull($key, $default = null)
	 * @method PostWithCustomSeparator first(callable $callback = null, $default = null)
	 * @method PostWithCustomSeparator firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithCustomSeparator[] all()
	 * @method PostWithCustomSeparator last(callable $callback = null, $default = null)
	 */
	class _PostWithCustomSeparatorCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithCustomSeparator[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithCustomSeparator create(array $attributes = [])
	 * @method _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] cursor()
	 * @method PostWithCustomSeparator|null find($id, array $columns = ['*'])
	 * @method _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithCustomSeparator findOrFail($id, array $columns = ['*'])
	 * @method _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithCustomSeparator first(array|string $columns = ['*'])
	 * @method PostWithCustomSeparator firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithCustomSeparator firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithCustomSeparator firstOrFail(array $columns = ['*'])
	 * @method PostWithCustomSeparator firstOrNew(array $attributes, array $values = [])
	 * @method PostWithCustomSeparator firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithCustomSeparator forceCreate(array $attributes)
	 * @method _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] get(array|string $columns = ['*'])
	 * @method PostWithCustomSeparator getModel()
	 * @method PostWithCustomSeparator[] getModels(array|string $columns = ['*'])
	 * @method _PostWithCustomSeparatorCollection|PostWithCustomSeparator[] hydrate(array $items)
	 * @method PostWithCustomSeparator make(array $attributes = [])
	 * @method PostWithCustomSeparator newModelInstance(array $attributes = [])
	 * @method PostWithCustomSeparator updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithCustomSeparatorQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithCustomSeparatorQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithCustomSource shift()
	 * @method PostWithCustomSource pop()
	 * @method PostWithCustomSource get($key, $default = null)
	 * @method PostWithCustomSource pull($key, $default = null)
	 * @method PostWithCustomSource first(callable $callback = null, $default = null)
	 * @method PostWithCustomSource firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithCustomSource[] all()
	 * @method PostWithCustomSource last(callable $callback = null, $default = null)
	 */
	class _PostWithCustomSourceCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithCustomSource[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithCustomSource create(array $attributes = [])
	 * @method _PostWithCustomSourceCollection|PostWithCustomSource[] cursor()
	 * @method PostWithCustomSource|null find($id, array $columns = ['*'])
	 * @method _PostWithCustomSourceCollection|PostWithCustomSource[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithCustomSource findOrFail($id, array $columns = ['*'])
	 * @method _PostWithCustomSourceCollection|PostWithCustomSource[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithCustomSource first(array|string $columns = ['*'])
	 * @method PostWithCustomSource firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithCustomSource firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithCustomSource firstOrFail(array $columns = ['*'])
	 * @method PostWithCustomSource firstOrNew(array $attributes, array $values = [])
	 * @method PostWithCustomSource firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithCustomSource forceCreate(array $attributes)
	 * @method _PostWithCustomSourceCollection|PostWithCustomSource[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithCustomSourceCollection|PostWithCustomSource[] get(array|string $columns = ['*'])
	 * @method PostWithCustomSource getModel()
	 * @method PostWithCustomSource[] getModels(array|string $columns = ['*'])
	 * @method _PostWithCustomSourceCollection|PostWithCustomSource[] hydrate(array $items)
	 * @method PostWithCustomSource make(array $attributes = [])
	 * @method PostWithCustomSource newModelInstance(array $attributes = [])
	 * @method PostWithCustomSource updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithCustomSourceQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithCustomSourceQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithCustomSuffix shift()
	 * @method PostWithCustomSuffix pop()
	 * @method PostWithCustomSuffix get($key, $default = null)
	 * @method PostWithCustomSuffix pull($key, $default = null)
	 * @method PostWithCustomSuffix first(callable $callback = null, $default = null)
	 * @method PostWithCustomSuffix firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithCustomSuffix[] all()
	 * @method PostWithCustomSuffix last(callable $callback = null, $default = null)
	 */
	class _PostWithCustomSuffixCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithCustomSuffix[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithCustomSuffix create(array $attributes = [])
	 * @method _PostWithCustomSuffixCollection|PostWithCustomSuffix[] cursor()
	 * @method PostWithCustomSuffix|null find($id, array $columns = ['*'])
	 * @method _PostWithCustomSuffixCollection|PostWithCustomSuffix[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithCustomSuffix findOrFail($id, array $columns = ['*'])
	 * @method _PostWithCustomSuffixCollection|PostWithCustomSuffix[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithCustomSuffix first(array|string $columns = ['*'])
	 * @method PostWithCustomSuffix firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithCustomSuffix firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithCustomSuffix firstOrFail(array $columns = ['*'])
	 * @method PostWithCustomSuffix firstOrNew(array $attributes, array $values = [])
	 * @method PostWithCustomSuffix firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithCustomSuffix forceCreate(array $attributes)
	 * @method _PostWithCustomSuffixCollection|PostWithCustomSuffix[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithCustomSuffixCollection|PostWithCustomSuffix[] get(array|string $columns = ['*'])
	 * @method PostWithCustomSuffix getModel()
	 * @method PostWithCustomSuffix[] getModels(array|string $columns = ['*'])
	 * @method _PostWithCustomSuffixCollection|PostWithCustomSuffix[] hydrate(array $items)
	 * @method PostWithCustomSuffix make(array $attributes = [])
	 * @method PostWithCustomSuffix newModelInstance(array $attributes = [])
	 * @method PostWithCustomSuffix updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithCustomSuffixQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithCustomSuffixQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithEmptySeparator shift()
	 * @method PostWithEmptySeparator pop()
	 * @method PostWithEmptySeparator get($key, $default = null)
	 * @method PostWithEmptySeparator pull($key, $default = null)
	 * @method PostWithEmptySeparator first(callable $callback = null, $default = null)
	 * @method PostWithEmptySeparator firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithEmptySeparator[] all()
	 * @method PostWithEmptySeparator last(callable $callback = null, $default = null)
	 */
	class _PostWithEmptySeparatorCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithEmptySeparator[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithEmptySeparator create(array $attributes = [])
	 * @method _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] cursor()
	 * @method PostWithEmptySeparator|null find($id, array $columns = ['*'])
	 * @method _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithEmptySeparator findOrFail($id, array $columns = ['*'])
	 * @method _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithEmptySeparator first(array|string $columns = ['*'])
	 * @method PostWithEmptySeparator firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithEmptySeparator firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithEmptySeparator firstOrFail(array $columns = ['*'])
	 * @method PostWithEmptySeparator firstOrNew(array $attributes, array $values = [])
	 * @method PostWithEmptySeparator firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithEmptySeparator forceCreate(array $attributes)
	 * @method _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] get(array|string $columns = ['*'])
	 * @method PostWithEmptySeparator getModel()
	 * @method PostWithEmptySeparator[] getModels(array|string $columns = ['*'])
	 * @method _PostWithEmptySeparatorCollection|PostWithEmptySeparator[] hydrate(array $items)
	 * @method PostWithEmptySeparator make(array $attributes = [])
	 * @method PostWithEmptySeparator newModelInstance(array $attributes = [])
	 * @method PostWithEmptySeparator updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithEmptySeparatorQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithEmptySeparatorQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithForeignRuleset shift()
	 * @method PostWithForeignRuleset pop()
	 * @method PostWithForeignRuleset get($key, $default = null)
	 * @method PostWithForeignRuleset pull($key, $default = null)
	 * @method PostWithForeignRuleset first(callable $callback = null, $default = null)
	 * @method PostWithForeignRuleset firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithForeignRuleset[] all()
	 * @method PostWithForeignRuleset last(callable $callback = null, $default = null)
	 */
	class _PostWithForeignRulesetCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithForeignRuleset[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithForeignRuleset create(array $attributes = [])
	 * @method _PostWithForeignRulesetCollection|PostWithForeignRuleset[] cursor()
	 * @method PostWithForeignRuleset|null find($id, array $columns = ['*'])
	 * @method _PostWithForeignRulesetCollection|PostWithForeignRuleset[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithForeignRuleset findOrFail($id, array $columns = ['*'])
	 * @method _PostWithForeignRulesetCollection|PostWithForeignRuleset[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithForeignRuleset first(array|string $columns = ['*'])
	 * @method PostWithForeignRuleset firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithForeignRuleset firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithForeignRuleset firstOrFail(array $columns = ['*'])
	 * @method PostWithForeignRuleset firstOrNew(array $attributes, array $values = [])
	 * @method PostWithForeignRuleset firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithForeignRuleset forceCreate(array $attributes)
	 * @method _PostWithForeignRulesetCollection|PostWithForeignRuleset[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithForeignRulesetCollection|PostWithForeignRuleset[] get(array|string $columns = ['*'])
	 * @method PostWithForeignRuleset getModel()
	 * @method PostWithForeignRuleset[] getModels(array|string $columns = ['*'])
	 * @method _PostWithForeignRulesetCollection|PostWithForeignRuleset[] hydrate(array $items)
	 * @method PostWithForeignRuleset make(array $attributes = [])
	 * @method PostWithForeignRuleset newModelInstance(array $attributes = [])
	 * @method PostWithForeignRuleset updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithForeignRulesetQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithForeignRulesetQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithIncludeTrashed shift()
	 * @method PostWithIncludeTrashed pop()
	 * @method PostWithIncludeTrashed get($key, $default = null)
	 * @method PostWithIncludeTrashed pull($key, $default = null)
	 * @method PostWithIncludeTrashed first(callable $callback = null, $default = null)
	 * @method PostWithIncludeTrashed firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithIncludeTrashed[] all()
	 * @method PostWithIncludeTrashed last(callable $callback = null, $default = null)
	 */
	class _PostWithIncludeTrashedCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithIncludeTrashed[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithIncludeTrashed create(array $attributes = [])
	 * @method _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] cursor()
	 * @method PostWithIncludeTrashed|null find($id, array $columns = ['*'])
	 * @method _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithIncludeTrashed findOrFail($id, array $columns = ['*'])
	 * @method _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithIncludeTrashed first(array|string $columns = ['*'])
	 * @method PostWithIncludeTrashed firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithIncludeTrashed firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithIncludeTrashed firstOrFail(array $columns = ['*'])
	 * @method PostWithIncludeTrashed firstOrNew(array $attributes, array $values = [])
	 * @method PostWithIncludeTrashed firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithIncludeTrashed forceCreate(array $attributes)
	 * @method _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] get(array|string $columns = ['*'])
	 * @method PostWithIncludeTrashed getModel()
	 * @method PostWithIncludeTrashed[] getModels(array|string $columns = ['*'])
	 * @method _PostWithIncludeTrashedCollection|PostWithIncludeTrashed[] hydrate(array $items)
	 * @method PostWithIncludeTrashed make(array $attributes = [])
	 * @method PostWithIncludeTrashed newModelInstance(array $attributes = [])
	 * @method PostWithIncludeTrashed updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithIncludeTrashedQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithIncludeTrashedQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithMaxLength shift()
	 * @method PostWithMaxLength pop()
	 * @method PostWithMaxLength get($key, $default = null)
	 * @method PostWithMaxLength pull($key, $default = null)
	 * @method PostWithMaxLength first(callable $callback = null, $default = null)
	 * @method PostWithMaxLength firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithMaxLength[] all()
	 * @method PostWithMaxLength last(callable $callback = null, $default = null)
	 */
	class _PostWithMaxLengthCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithMaxLength[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithMaxLength create(array $attributes = [])
	 * @method _PostWithMaxLengthCollection|PostWithMaxLength[] cursor()
	 * @method PostWithMaxLength|null find($id, array $columns = ['*'])
	 * @method _PostWithMaxLengthCollection|PostWithMaxLength[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithMaxLength findOrFail($id, array $columns = ['*'])
	 * @method _PostWithMaxLengthCollection|PostWithMaxLength[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithMaxLength first(array|string $columns = ['*'])
	 * @method PostWithMaxLength firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithMaxLength firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithMaxLength firstOrFail(array $columns = ['*'])
	 * @method PostWithMaxLength firstOrNew(array $attributes, array $values = [])
	 * @method PostWithMaxLength firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithMaxLength forceCreate(array $attributes)
	 * @method _PostWithMaxLengthCollection|PostWithMaxLength[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithMaxLengthCollection|PostWithMaxLength[] get(array|string $columns = ['*'])
	 * @method PostWithMaxLength getModel()
	 * @method PostWithMaxLength[] getModels(array|string $columns = ['*'])
	 * @method _PostWithMaxLengthCollection|PostWithMaxLength[] hydrate(array $items)
	 * @method PostWithMaxLength make(array $attributes = [])
	 * @method PostWithMaxLength newModelInstance(array $attributes = [])
	 * @method PostWithMaxLength updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithMaxLengthQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithMaxLengthQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithMaxLengthSplitWords shift()
	 * @method PostWithMaxLengthSplitWords pop()
	 * @method PostWithMaxLengthSplitWords get($key, $default = null)
	 * @method PostWithMaxLengthSplitWords pull($key, $default = null)
	 * @method PostWithMaxLengthSplitWords first(callable $callback = null, $default = null)
	 * @method PostWithMaxLengthSplitWords firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithMaxLengthSplitWords[] all()
	 * @method PostWithMaxLengthSplitWords last(callable $callback = null, $default = null)
	 */
	class _PostWithMaxLengthSplitWordsCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithMaxLengthSplitWords[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithMaxLengthSplitWords create(array $attributes = [])
	 * @method _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] cursor()
	 * @method PostWithMaxLengthSplitWords|null find($id, array $columns = ['*'])
	 * @method _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithMaxLengthSplitWords findOrFail($id, array $columns = ['*'])
	 * @method _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithMaxLengthSplitWords first(array|string $columns = ['*'])
	 * @method PostWithMaxLengthSplitWords firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithMaxLengthSplitWords firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithMaxLengthSplitWords firstOrFail(array $columns = ['*'])
	 * @method PostWithMaxLengthSplitWords firstOrNew(array $attributes, array $values = [])
	 * @method PostWithMaxLengthSplitWords firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithMaxLengthSplitWords forceCreate(array $attributes)
	 * @method _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] get(array|string $columns = ['*'])
	 * @method PostWithMaxLengthSplitWords getModel()
	 * @method PostWithMaxLengthSplitWords[] getModels(array|string $columns = ['*'])
	 * @method _PostWithMaxLengthSplitWordsCollection|PostWithMaxLengthSplitWords[] hydrate(array $items)
	 * @method PostWithMaxLengthSplitWords make(array $attributes = [])
	 * @method PostWithMaxLengthSplitWords newModelInstance(array $attributes = [])
	 * @method PostWithMaxLengthSplitWords updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithMaxLengthSplitWordsQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithMaxLengthSplitWordsQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithMultipleSlugsAndCustomSlugKey shift()
	 * @method PostWithMultipleSlugsAndCustomSlugKey pop()
	 * @method PostWithMultipleSlugsAndCustomSlugKey get($key, $default = null)
	 * @method PostWithMultipleSlugsAndCustomSlugKey pull($key, $default = null)
	 * @method PostWithMultipleSlugsAndCustomSlugKey first(callable $callback = null, $default = null)
	 * @method PostWithMultipleSlugsAndCustomSlugKey firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithMultipleSlugsAndCustomSlugKey[] all()
	 * @method PostWithMultipleSlugsAndCustomSlugKey last(callable $callback = null, $default = null)
	 */
	class _PostWithMultipleSlugsAndCustomSlugKeyCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithMultipleSlugsAndCustomSlugKey[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithMultipleSlugsAndCustomSlugKey create(array $attributes = [])
	 * @method _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] cursor()
	 * @method PostWithMultipleSlugsAndCustomSlugKey|null find($id, array $columns = ['*'])
	 * @method _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithMultipleSlugsAndCustomSlugKey findOrFail($id, array $columns = ['*'])
	 * @method _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithMultipleSlugsAndCustomSlugKey first(array|string $columns = ['*'])
	 * @method PostWithMultipleSlugsAndCustomSlugKey firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithMultipleSlugsAndCustomSlugKey firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithMultipleSlugsAndCustomSlugKey firstOrFail(array $columns = ['*'])
	 * @method PostWithMultipleSlugsAndCustomSlugKey firstOrNew(array $attributes, array $values = [])
	 * @method PostWithMultipleSlugsAndCustomSlugKey firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithMultipleSlugsAndCustomSlugKey forceCreate(array $attributes)
	 * @method _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] get(array|string $columns = ['*'])
	 * @method PostWithMultipleSlugsAndCustomSlugKey getModel()
	 * @method PostWithMultipleSlugsAndCustomSlugKey[] getModels(array|string $columns = ['*'])
	 * @method _PostWithMultipleSlugsAndCustomSlugKeyCollection|PostWithMultipleSlugsAndCustomSlugKey[] hydrate(array $items)
	 * @method PostWithMultipleSlugsAndCustomSlugKey make(array $attributes = [])
	 * @method PostWithMultipleSlugsAndCustomSlugKey newModelInstance(array $attributes = [])
	 * @method PostWithMultipleSlugsAndCustomSlugKey updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 * @method _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder whereSlug(string $slug)
	 */
	class _PostWithMultipleSlugsAndCustomSlugKeyQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithMultipleSlugsAndHelperTrait shift()
	 * @method PostWithMultipleSlugsAndHelperTrait pop()
	 * @method PostWithMultipleSlugsAndHelperTrait get($key, $default = null)
	 * @method PostWithMultipleSlugsAndHelperTrait pull($key, $default = null)
	 * @method PostWithMultipleSlugsAndHelperTrait first(callable $callback = null, $default = null)
	 * @method PostWithMultipleSlugsAndHelperTrait firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithMultipleSlugsAndHelperTrait[] all()
	 * @method PostWithMultipleSlugsAndHelperTrait last(callable $callback = null, $default = null)
	 */
	class _PostWithMultipleSlugsAndHelperTraitCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithMultipleSlugsAndHelperTrait[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithMultipleSlugsAndHelperTrait create(array $attributes = [])
	 * @method _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] cursor()
	 * @method PostWithMultipleSlugsAndHelperTrait|null find($id, array $columns = ['*'])
	 * @method _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithMultipleSlugsAndHelperTrait findOrFail($id, array $columns = ['*'])
	 * @method _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithMultipleSlugsAndHelperTrait first(array|string $columns = ['*'])
	 * @method PostWithMultipleSlugsAndHelperTrait firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithMultipleSlugsAndHelperTrait firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithMultipleSlugsAndHelperTrait firstOrFail(array $columns = ['*'])
	 * @method PostWithMultipleSlugsAndHelperTrait firstOrNew(array $attributes, array $values = [])
	 * @method PostWithMultipleSlugsAndHelperTrait firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithMultipleSlugsAndHelperTrait forceCreate(array $attributes)
	 * @method _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] get(array|string $columns = ['*'])
	 * @method PostWithMultipleSlugsAndHelperTrait getModel()
	 * @method PostWithMultipleSlugsAndHelperTrait[] getModels(array|string $columns = ['*'])
	 * @method _PostWithMultipleSlugsAndHelperTraitCollection|PostWithMultipleSlugsAndHelperTrait[] hydrate(array $items)
	 * @method PostWithMultipleSlugsAndHelperTrait make(array $attributes = [])
	 * @method PostWithMultipleSlugsAndHelperTrait newModelInstance(array $attributes = [])
	 * @method PostWithMultipleSlugsAndHelperTrait updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithMultipleSlugsAndHelperTraitQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 * @method _PostWithMultipleSlugsAndHelperTraitQueryBuilder whereSlug(string $slug)
	 */
	class _PostWithMultipleSlugsAndHelperTraitQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithMultipleSlugs shift()
	 * @method PostWithMultipleSlugs pop()
	 * @method PostWithMultipleSlugs get($key, $default = null)
	 * @method PostWithMultipleSlugs pull($key, $default = null)
	 * @method PostWithMultipleSlugs first(callable $callback = null, $default = null)
	 * @method PostWithMultipleSlugs firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithMultipleSlugs[] all()
	 * @method PostWithMultipleSlugs last(callable $callback = null, $default = null)
	 */
	class _PostWithMultipleSlugsCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithMultipleSlugs[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithMultipleSlugs create(array $attributes = [])
	 * @method _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] cursor()
	 * @method PostWithMultipleSlugs|null find($id, array $columns = ['*'])
	 * @method _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithMultipleSlugs findOrFail($id, array $columns = ['*'])
	 * @method _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithMultipleSlugs first(array|string $columns = ['*'])
	 * @method PostWithMultipleSlugs firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithMultipleSlugs firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithMultipleSlugs firstOrFail(array $columns = ['*'])
	 * @method PostWithMultipleSlugs firstOrNew(array $attributes, array $values = [])
	 * @method PostWithMultipleSlugs firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithMultipleSlugs forceCreate(array $attributes)
	 * @method _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] get(array|string $columns = ['*'])
	 * @method PostWithMultipleSlugs getModel()
	 * @method PostWithMultipleSlugs[] getModels(array|string $columns = ['*'])
	 * @method _PostWithMultipleSlugsCollection|PostWithMultipleSlugs[] hydrate(array $items)
	 * @method PostWithMultipleSlugs make(array $attributes = [])
	 * @method PostWithMultipleSlugs newModelInstance(array $attributes = [])
	 * @method PostWithMultipleSlugs updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithMultipleSlugsQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithMultipleSlugsQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithMultipleSources shift()
	 * @method PostWithMultipleSources pop()
	 * @method PostWithMultipleSources get($key, $default = null)
	 * @method PostWithMultipleSources pull($key, $default = null)
	 * @method PostWithMultipleSources first(callable $callback = null, $default = null)
	 * @method PostWithMultipleSources firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithMultipleSources[] all()
	 * @method PostWithMultipleSources last(callable $callback = null, $default = null)
	 */
	class _PostWithMultipleSourcesCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithMultipleSources[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithMultipleSources create(array $attributes = [])
	 * @method _PostWithMultipleSourcesCollection|PostWithMultipleSources[] cursor()
	 * @method PostWithMultipleSources|null find($id, array $columns = ['*'])
	 * @method _PostWithMultipleSourcesCollection|PostWithMultipleSources[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithMultipleSources findOrFail($id, array $columns = ['*'])
	 * @method _PostWithMultipleSourcesCollection|PostWithMultipleSources[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithMultipleSources first(array|string $columns = ['*'])
	 * @method PostWithMultipleSources firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithMultipleSources firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithMultipleSources firstOrFail(array $columns = ['*'])
	 * @method PostWithMultipleSources firstOrNew(array $attributes, array $values = [])
	 * @method PostWithMultipleSources firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithMultipleSources forceCreate(array $attributes)
	 * @method _PostWithMultipleSourcesCollection|PostWithMultipleSources[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithMultipleSourcesCollection|PostWithMultipleSources[] get(array|string $columns = ['*'])
	 * @method PostWithMultipleSources getModel()
	 * @method PostWithMultipleSources[] getModels(array|string $columns = ['*'])
	 * @method _PostWithMultipleSourcesCollection|PostWithMultipleSources[] hydrate(array $items)
	 * @method PostWithMultipleSources make(array $attributes = [])
	 * @method PostWithMultipleSources newModelInstance(array $attributes = [])
	 * @method PostWithMultipleSources updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithMultipleSourcesQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithMultipleSourcesQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithNoSource shift()
	 * @method PostWithNoSource pop()
	 * @method PostWithNoSource get($key, $default = null)
	 * @method PostWithNoSource pull($key, $default = null)
	 * @method PostWithNoSource first(callable $callback = null, $default = null)
	 * @method PostWithNoSource firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithNoSource[] all()
	 * @method PostWithNoSource last(callable $callback = null, $default = null)
	 */
	class _PostWithNoSourceCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithNoSource[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithNoSource create(array $attributes = [])
	 * @method _PostWithNoSourceCollection|PostWithNoSource[] cursor()
	 * @method PostWithNoSource|null find($id, array $columns = ['*'])
	 * @method _PostWithNoSourceCollection|PostWithNoSource[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithNoSource findOrFail($id, array $columns = ['*'])
	 * @method _PostWithNoSourceCollection|PostWithNoSource[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithNoSource first(array|string $columns = ['*'])
	 * @method PostWithNoSource firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithNoSource firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithNoSource firstOrFail(array $columns = ['*'])
	 * @method PostWithNoSource firstOrNew(array $attributes, array $values = [])
	 * @method PostWithNoSource firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithNoSource forceCreate(array $attributes)
	 * @method _PostWithNoSourceCollection|PostWithNoSource[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithNoSourceCollection|PostWithNoSource[] get(array|string $columns = ['*'])
	 * @method PostWithNoSource getModel()
	 * @method PostWithNoSource[] getModels(array|string $columns = ['*'])
	 * @method _PostWithNoSourceCollection|PostWithNoSource[] hydrate(array $items)
	 * @method PostWithNoSource make(array $attributes = [])
	 * @method PostWithNoSource newModelInstance(array $attributes = [])
	 * @method PostWithNoSource updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithNoSourceQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithNoSourceQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithOnUpdate shift()
	 * @method PostWithOnUpdate pop()
	 * @method PostWithOnUpdate get($key, $default = null)
	 * @method PostWithOnUpdate pull($key, $default = null)
	 * @method PostWithOnUpdate first(callable $callback = null, $default = null)
	 * @method PostWithOnUpdate firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithOnUpdate[] all()
	 * @method PostWithOnUpdate last(callable $callback = null, $default = null)
	 */
	class _PostWithOnUpdateCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithOnUpdate[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithOnUpdate create(array $attributes = [])
	 * @method _PostWithOnUpdateCollection|PostWithOnUpdate[] cursor()
	 * @method PostWithOnUpdate|null find($id, array $columns = ['*'])
	 * @method _PostWithOnUpdateCollection|PostWithOnUpdate[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithOnUpdate findOrFail($id, array $columns = ['*'])
	 * @method _PostWithOnUpdateCollection|PostWithOnUpdate[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithOnUpdate first(array|string $columns = ['*'])
	 * @method PostWithOnUpdate firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithOnUpdate firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithOnUpdate firstOrFail(array $columns = ['*'])
	 * @method PostWithOnUpdate firstOrNew(array $attributes, array $values = [])
	 * @method PostWithOnUpdate firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithOnUpdate forceCreate(array $attributes)
	 * @method _PostWithOnUpdateCollection|PostWithOnUpdate[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithOnUpdateCollection|PostWithOnUpdate[] get(array|string $columns = ['*'])
	 * @method PostWithOnUpdate getModel()
	 * @method PostWithOnUpdate[] getModels(array|string $columns = ['*'])
	 * @method _PostWithOnUpdateCollection|PostWithOnUpdate[] hydrate(array $items)
	 * @method PostWithOnUpdate make(array $attributes = [])
	 * @method PostWithOnUpdate newModelInstance(array $attributes = [])
	 * @method PostWithOnUpdate updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithOnUpdateQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithOnUpdateQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithRelation shift()
	 * @method PostWithRelation pop()
	 * @method PostWithRelation get($key, $default = null)
	 * @method PostWithRelation pull($key, $default = null)
	 * @method PostWithRelation first(callable $callback = null, $default = null)
	 * @method PostWithRelation firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithRelation[] all()
	 * @method PostWithRelation last(callable $callback = null, $default = null)
	 */
	class _PostWithRelationCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithRelation[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithRelation create(array $attributes = [])
	 * @method _PostWithRelationCollection|PostWithRelation[] cursor()
	 * @method PostWithRelation|null find($id, array $columns = ['*'])
	 * @method _PostWithRelationCollection|PostWithRelation[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithRelation findOrFail($id, array $columns = ['*'])
	 * @method _PostWithRelationCollection|PostWithRelation[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithRelation first(array|string $columns = ['*'])
	 * @method PostWithRelation firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithRelation firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithRelation firstOrFail(array $columns = ['*'])
	 * @method PostWithRelation firstOrNew(array $attributes, array $values = [])
	 * @method PostWithRelation firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithRelation forceCreate(array $attributes)
	 * @method _PostWithRelationCollection|PostWithRelation[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithRelationCollection|PostWithRelation[] get(array|string $columns = ['*'])
	 * @method PostWithRelation getModel()
	 * @method PostWithRelation[] getModels(array|string $columns = ['*'])
	 * @method _PostWithRelationCollection|PostWithRelation[] hydrate(array $items)
	 * @method PostWithRelation make(array $attributes = [])
	 * @method PostWithRelation newModelInstance(array $attributes = [])
	 * @method PostWithRelation updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithRelationQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithRelationQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithReservedSlug shift()
	 * @method PostWithReservedSlug pop()
	 * @method PostWithReservedSlug get($key, $default = null)
	 * @method PostWithReservedSlug pull($key, $default = null)
	 * @method PostWithReservedSlug first(callable $callback = null, $default = null)
	 * @method PostWithReservedSlug firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithReservedSlug[] all()
	 * @method PostWithReservedSlug last(callable $callback = null, $default = null)
	 */
	class _PostWithReservedSlugCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithReservedSlug[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithReservedSlug create(array $attributes = [])
	 * @method _PostWithReservedSlugCollection|PostWithReservedSlug[] cursor()
	 * @method PostWithReservedSlug|null find($id, array $columns = ['*'])
	 * @method _PostWithReservedSlugCollection|PostWithReservedSlug[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithReservedSlug findOrFail($id, array $columns = ['*'])
	 * @method _PostWithReservedSlugCollection|PostWithReservedSlug[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithReservedSlug first(array|string $columns = ['*'])
	 * @method PostWithReservedSlug firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithReservedSlug firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithReservedSlug firstOrFail(array $columns = ['*'])
	 * @method PostWithReservedSlug firstOrNew(array $attributes, array $values = [])
	 * @method PostWithReservedSlug firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithReservedSlug forceCreate(array $attributes)
	 * @method _PostWithReservedSlugCollection|PostWithReservedSlug[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithReservedSlugCollection|PostWithReservedSlug[] get(array|string $columns = ['*'])
	 * @method PostWithReservedSlug getModel()
	 * @method PostWithReservedSlug[] getModels(array|string $columns = ['*'])
	 * @method _PostWithReservedSlugCollection|PostWithReservedSlug[] hydrate(array $items)
	 * @method PostWithReservedSlug make(array $attributes = [])
	 * @method PostWithReservedSlug newModelInstance(array $attributes = [])
	 * @method PostWithReservedSlug updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithReservedSlugQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithReservedSlugQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithSoftDeleting shift()
	 * @method PostWithSoftDeleting pop()
	 * @method PostWithSoftDeleting get($key, $default = null)
	 * @method PostWithSoftDeleting pull($key, $default = null)
	 * @method PostWithSoftDeleting first(callable $callback = null, $default = null)
	 * @method PostWithSoftDeleting firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithSoftDeleting[] all()
	 * @method PostWithSoftDeleting last(callable $callback = null, $default = null)
	 */
	class _PostWithSoftDeletingCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithSoftDeleting[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithSoftDeletingIncludeTrashed shift()
	 * @method PostWithSoftDeletingIncludeTrashed pop()
	 * @method PostWithSoftDeletingIncludeTrashed get($key, $default = null)
	 * @method PostWithSoftDeletingIncludeTrashed pull($key, $default = null)
	 * @method PostWithSoftDeletingIncludeTrashed first(callable $callback = null, $default = null)
	 * @method PostWithSoftDeletingIncludeTrashed firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithSoftDeletingIncludeTrashed[] all()
	 * @method PostWithSoftDeletingIncludeTrashed last(callable $callback = null, $default = null)
	 */
	class _PostWithSoftDeletingIncludeTrashedCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithSoftDeletingIncludeTrashed[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithSoftDeletingIncludeTrashed create(array $attributes = [])
	 * @method _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] cursor()
	 * @method PostWithSoftDeletingIncludeTrashed|null find($id, array $columns = ['*'])
	 * @method _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithSoftDeletingIncludeTrashed findOrFail($id, array $columns = ['*'])
	 * @method _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithSoftDeletingIncludeTrashed first(array|string $columns = ['*'])
	 * @method PostWithSoftDeletingIncludeTrashed firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithSoftDeletingIncludeTrashed firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithSoftDeletingIncludeTrashed firstOrFail(array $columns = ['*'])
	 * @method PostWithSoftDeletingIncludeTrashed firstOrNew(array $attributes, array $values = [])
	 * @method PostWithSoftDeletingIncludeTrashed firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithSoftDeletingIncludeTrashed forceCreate(array $attributes)
	 * @method _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] get(array|string $columns = ['*'])
	 * @method PostWithSoftDeletingIncludeTrashed getModel()
	 * @method PostWithSoftDeletingIncludeTrashed[] getModels(array|string $columns = ['*'])
	 * @method _PostWithSoftDeletingIncludeTrashedCollection|PostWithSoftDeletingIncludeTrashed[] hydrate(array $items)
	 * @method PostWithSoftDeletingIncludeTrashed make(array $attributes = [])
	 * @method PostWithSoftDeletingIncludeTrashed newModelInstance(array $attributes = [])
	 * @method PostWithSoftDeletingIncludeTrashed updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithSoftDeletingIncludeTrashedQueryBuilder withTrashed()
	 * @method _PostWithSoftDeletingIncludeTrashedQueryBuilder onlyTrashed()
	 * @method _PostWithSoftDeletingIncludeTrashedQueryBuilder withoutTrashed()
	 * @method _PostWithSoftDeletingIncludeTrashedQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithSoftDeletingIncludeTrashedQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithSoftDeleting create(array $attributes = [])
	 * @method _PostWithSoftDeletingCollection|PostWithSoftDeleting[] cursor()
	 * @method PostWithSoftDeleting|null find($id, array $columns = ['*'])
	 * @method _PostWithSoftDeletingCollection|PostWithSoftDeleting[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithSoftDeleting findOrFail($id, array $columns = ['*'])
	 * @method _PostWithSoftDeletingCollection|PostWithSoftDeleting[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithSoftDeleting first(array|string $columns = ['*'])
	 * @method PostWithSoftDeleting firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithSoftDeleting firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithSoftDeleting firstOrFail(array $columns = ['*'])
	 * @method PostWithSoftDeleting firstOrNew(array $attributes, array $values = [])
	 * @method PostWithSoftDeleting firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithSoftDeleting forceCreate(array $attributes)
	 * @method _PostWithSoftDeletingCollection|PostWithSoftDeleting[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithSoftDeletingCollection|PostWithSoftDeleting[] get(array|string $columns = ['*'])
	 * @method PostWithSoftDeleting getModel()
	 * @method PostWithSoftDeleting[] getModels(array|string $columns = ['*'])
	 * @method _PostWithSoftDeletingCollection|PostWithSoftDeleting[] hydrate(array $items)
	 * @method PostWithSoftDeleting make(array $attributes = [])
	 * @method PostWithSoftDeleting newModelInstance(array $attributes = [])
	 * @method PostWithSoftDeleting updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithSoftDeletingQueryBuilder withTrashed()
	 * @method _PostWithSoftDeletingQueryBuilder onlyTrashed()
	 * @method _PostWithSoftDeletingQueryBuilder withoutTrashed()
	 * @method _PostWithSoftDeletingQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 */
	class _PostWithSoftDeletingQueryBuilder extends _BaseBuilder
	{
	}

	/**
	 * @method PostWithUniqueSlugConstraints shift()
	 * @method PostWithUniqueSlugConstraints pop()
	 * @method PostWithUniqueSlugConstraints get($key, $default = null)
	 * @method PostWithUniqueSlugConstraints pull($key, $default = null)
	 * @method PostWithUniqueSlugConstraints first(callable $callback = null, $default = null)
	 * @method PostWithUniqueSlugConstraints firstWhere(string $key, $operator = null, $value = null)
	 * @method PostWithUniqueSlugConstraints[] all()
	 * @method PostWithUniqueSlugConstraints last(callable $callback = null, $default = null)
	 */
	class _PostWithUniqueSlugConstraintsCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return PostWithUniqueSlugConstraints[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method PostWithUniqueSlugConstraints create(array $attributes = [])
	 * @method _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] cursor()
	 * @method PostWithUniqueSlugConstraints|null find($id, array $columns = ['*'])
	 * @method _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method PostWithUniqueSlugConstraints findOrFail($id, array $columns = ['*'])
	 * @method _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] findOrNew($id, array $columns = ['*'])
	 * @method PostWithUniqueSlugConstraints first(array|string $columns = ['*'])
	 * @method PostWithUniqueSlugConstraints firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method PostWithUniqueSlugConstraints firstOrCreate(array $attributes, array $values = [])
	 * @method PostWithUniqueSlugConstraints firstOrFail(array $columns = ['*'])
	 * @method PostWithUniqueSlugConstraints firstOrNew(array $attributes, array $values = [])
	 * @method PostWithUniqueSlugConstraints firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method PostWithUniqueSlugConstraints forceCreate(array $attributes)
	 * @method _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] fromQuery(string $query, array $bindings = [])
	 * @method _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] get(array|string $columns = ['*'])
	 * @method PostWithUniqueSlugConstraints getModel()
	 * @method PostWithUniqueSlugConstraints[] getModels(array|string $columns = ['*'])
	 * @method _PostWithUniqueSlugConstraintsCollection|PostWithUniqueSlugConstraints[] hydrate(array $items)
	 * @method PostWithUniqueSlugConstraints make(array $attributes = [])
	 * @method PostWithUniqueSlugConstraints newModelInstance(array $attributes = [])
	 * @method PostWithUniqueSlugConstraints updateOrCreate(array $attributes, array $values = [])
	 * @method _PostWithUniqueSlugConstraintsQueryBuilder findSimilarSlugs(string $attribute, array $config, string $slug)
	 * @method _PostWithUniqueSlugConstraintsQueryBuilder withUniqueSlugConstraints(Model $model, string $attribute, array $config, string $slug)
	 */
	class _PostWithUniqueSlugConstraintsQueryBuilder extends _BaseBuilder
	{
	}
}

namespace LaravelIdea\Helper\Illuminate\Notifications {

	use Illuminate\Contracts\Support\Arrayable;
	use Illuminate\Notifications\DatabaseNotification;
	use LaravelIdea\Helper\_BaseBuilder;
	use LaravelIdea\Helper\_BaseCollection;

	/**
	 * @method DatabaseNotification shift()
	 * @method DatabaseNotification pop()
	 * @method DatabaseNotification get($key, $default = null)
	 * @method DatabaseNotification pull($key, $default = null)
	 * @method DatabaseNotification first(callable $callback = null, $default = null)
	 * @method DatabaseNotification firstWhere(string $key, $operator = null, $value = null)
	 * @method DatabaseNotification[] all()
	 * @method DatabaseNotification last(callable $callback = null, $default = null)
	 */
	class _DatabaseNotificationCollection extends _BaseCollection
	{
		/**
		 * @param int $size
		 * @return DatabaseNotification[][]
		 */
		public function chunk($size)
		{
			return [];
		}
	}

	/**
	 * @method DatabaseNotification create(array $attributes = [])
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] cursor()
	 * @method DatabaseNotification|null find($id, array $columns = ['*'])
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] findMany(array|Arrayable $ids, array $columns = ['*'])
	 * @method DatabaseNotification findOrFail($id, array $columns = ['*'])
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] findOrNew($id, array $columns = ['*'])
	 * @method DatabaseNotification first(array|string $columns = ['*'])
	 * @method DatabaseNotification firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
	 * @method DatabaseNotification firstOrCreate(array $attributes, array $values = [])
	 * @method DatabaseNotification firstOrFail(array $columns = ['*'])
	 * @method DatabaseNotification firstOrNew(array $attributes, array $values = [])
	 * @method DatabaseNotification firstWhere(array|\Closure|string $column, $operator = null, $value = null, string $boolean = 'and')
	 * @method DatabaseNotification forceCreate(array $attributes)
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] fromQuery(string $query, array $bindings = [])
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] get(array|string $columns = ['*'])
	 * @method DatabaseNotification getModel()
	 * @method DatabaseNotification[] getModels(array|string $columns = ['*'])
	 * @method _DatabaseNotificationCollection|DatabaseNotification[] hydrate(array $items)
	 * @method DatabaseNotification make(array $attributes = [])
	 * @method DatabaseNotification newModelInstance(array $attributes = [])
	 * @method DatabaseNotification updateOrCreate(array $attributes, array $values = [])
	 */
	class _DatabaseNotificationQueryBuilder extends _BaseBuilder
	{
	}
}
