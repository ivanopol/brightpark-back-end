<?php

namespace App\Services;

use App\CarModel;
use App\CarType;
use App\Stocks;
use Illuminate\Http\Request;
use Exception;
use Illuminate\Support\Facades\DB;
use Artesaos\SEOTools\Facades\SEOMeta;
use Artesaos\SEOTools\Facades\OpenGraph;
use Artesaos\SEOTools\Facades\TwitterCard;
use Artesaos\SEOTools\Facades\JsonLd;
use App\Seo;
use App\City;
use App\Contacts;

class SeoService
{
    public $request;

    public function __construct(Request $request = NULL)
    {
        if ($request) {
            $this->request = $request;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏
     *
     * @param string $route
     * @return object
     */
    public function getMetaTags(string $route = '')
    {
        $meta_tags = [];
        $meta = [];

        if (!$route) {
            return $meta_tags;
        }

        $route_tmp = explode('?', $route);

        $segments = explode("/", ltrim($route_tmp[0], '/'));
        $route_city = array_shift($segments);

        $city = City::where('alias', $route_city)->first();

        if ($city) {
            $meta = $this->findSeoTags($segments, $city);
        }

        if ($meta) {
            $coordinates = explode(',', $city->coordinates);
            $meta['images'] = '/images/main/tablet/main_granta_red.jpg';
            $meta['place']['latitude'] = trim($coordinates[0]);
            $meta['place']['longitude'] = trim($coordinates[1]);
            $meta['site_name'] = 'brightpark.ru';
        }

        return $meta;
    }

    /**
     * –ò—â–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏
     *
     * @param array $segments –°–µ–≥–µ–º–µ–Ω—Ç—ã —Ä–æ—É—Ç–∞
     * @param City $city –ì–æ—Ä–æ–¥
     * @return array
     */
    private function findSeoTags(array $segments, City $city) : array
    {
        $meta = [];

        $meta_arr = Seo::where('url', implode('/', $segments))->orderBy('id', 'asc')->get()->toArray();

        if ($meta_arr) {
            $meta_tmp = array_filter($meta_arr, function($var) use ($city) {
                $cities = explode(",", $var['city']);
                return in_array($city->id, $cities);
            });

            if (!$meta_tmp) {
                $meta_tmp = array_filter($meta_arr, function($var){
                    $cities = explode(",", $var['city']);
                    return in_array(0, $cities);
                });
            }

            if ($meta_tmp) {
                $meta_tmp = array_values($meta_tmp);
                $meta = $meta_tmp[count($meta_tmp) - 1];

                $patterns = [
                    '/<:CITY:>/',
                    '/<:CITY_DATIVE:>/',
                    '/<:REGION_DATIVE:>/',
                ];

                $replacements = [
                    $city->title_ru,
                    $city->city_dative,
                    $city->region_dative,
                ];

                if (count($segments) && $segments[0] === 'contacts') {
                    $contacts = Contacts::where('city_id', $city->id)->first();

                    array_push($patterns, '/<:ADDRESS:>/', '/<:PHONE:>/');
                    array_push($replacements, $contacts->address, $contacts->phone);
                }

                list($meta['title'], $meta['description']) = preg_replace($patterns, $replacements, [$meta['title'], $meta['description']]);
            }
        }

        return $meta;
    }

    /**
     * –ó–∞–¥–∞–µ–º –º–µ—Ç–∞ —Ç–µ–≥–∏
     *
     * @param $city
     * @param array $params
     * @return void
     */
    public function setMetaTags($city, array $params = []) : void
    {
        if ($city === null ) {
            return;
        }

        $path = $this->request->path();
        $path_segments = explode('/', $path);
        array_shift($path_segments);

        $seo_db = DB::table('seo')
            ->join('seo_cities', 'seo.id', '=', 'seo_cities.seo_id')
            ->select('seo.*', 'seo_cities.*')
            ->where('seo.url', implode('/', $path_segments))
            ->where(function($query) use($city) {
                $query->where('seo_cities.city_id', $city->id)
                    ->orWhere('seo_cities.city_id', 0);
            })
            ->first();

        if ($seo_db) {
            $patterns = [
                '/<:CITY_DATIVE:>/',
                '/<:REGION_DATIVE:>/',
            ];

            $replacements = [
                $city->city_dative,
                $city->region_dative,
            ];

            list($seo_db->title, $seo_db->description) = preg_replace($patterns, $replacements, [$seo_db->title, $seo_db->description]);
        }

        $seo = $this->generateMetaTags($path, $city, $params);

        $title = !empty($seo_db->title) ? $seo_db->title : $seo->title;
        $description = !empty($seo_db->description) ? $seo_db->description : $seo->description;

        SEOMeta::setTitle($title);
        SEOMeta::setDescription($description);
        SEOMeta::setCanonical($this->request->url());
        OpenGraph::setTitle($title);
        OpenGraph::setType('website');
        OpenGraph::setUrl($this->request->fullUrl());
        OpenGraph::setDescription($description);

        JsonLd::setTitle($title);
        JsonLd::setType('WebSite');
        JsonLd::setUrl($this->request->fullUrl());
        JsonLd::setDescription($description);

        if (isset($seo->image) && $seo->image) {
            OpenGraph::addImage($seo->image);
        }
        if (isset($seo->place) && $seo->place) {
            OpenGraph::setType('place')
                ->setPlace([
                    'location:latitude' => $seo->place[0],
                    'location:longitude' => $seo->place[1],
                ]);
        }
        TwitterCard::setTitle($title);

    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏
     *
     * @param string $path –ü—É—Ç—å –Ω–∞ —Å–∞–π—Ç–µ
     * @param City $city –ì–æ—Ä–æ–¥
     * @param array $params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @return object
     */
    public function generateMetaTags(string $path, City $city, array $params = []) : object
    {
        $tags = new \stdClass;
        $segments = explode('/', $this->request->path());

        switch ( count($segments) )
        {
            case 1:
                $tags->title = "–ê–≤—Ç–æ—Å–∞–ª–æ–Ω –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ „Éº –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–ª–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –õ–∞–¥–∞ (Lada) –≤ " . $city->city_dative;
                $tags->description = "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–ª–µ—Ä LADA –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ ‚≠ê –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ª—É—á—à–∏–µ —Ü–µ–Ω—ã üëçüèº –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ üõ† –õ–∞–¥–∞ –≤ " . $city->region_dative . " üöó –ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é Lada –≤ " . $city->city_dative . " üöó –≤ –æ–±–º–µ–Ω –∏ –∫—Ä–µ–¥–∏—Ç. 500 –∞–≤—Ç–æ —Å –ü–¢–° –≤ –Ω–∞–ª–∏—á–∏–∏.";
                $tags->place = $params['place'];
                break;
            case 2:
                if ( $segments[1] === 'contacts' )
                {
                    $contacts = Contacts::where('city_id', $city->id)->first();
                    $tags->title = "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ë—Ä–∞–π—Ç –ü–∞—Ä–∫–∞ –≤ " . $city->city_dative . ". –ê–¥—Ä–µ—Å: " . $contacts->address. ', –¢–µ–ª–µ—Ñ–æ–Ω: ' . $contacts->phone;
                    $tags->description = "–ë—Ä–∞–π—Ç –ü–∞—Ä–∫ –≤ " . $city->city_dative . ". " . $contacts->address . ', —Ç–µ–ª.: ' . $contacts->phone;
                } elseif ( $segments[1] === 'stocks' )
                {
                    $tags->title = "–ê–∫—Ü–∏–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ LADA –≤ " . $city->city_dative;
                    $tags->description = "–ò—â–µ—Ç–µ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ LADA –≤ " . $city->city_dative . "? –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ü–∏–∏ –≤ –ë—Ä–∞–π—Ç –ü–∞—Ä–∫–µ";
                } elseif ( $segments[1] === 'news' )
                {
                       $tags->title = "–ù–æ–≤–æ—Å—Ç–∏ ‚Äì –ë—Ä–∞–π—Ç –ü–∞—Ä–∫: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–ª–µ—Ä LADA –≤ " . $city->city_dative;
                       $tags->description = "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞ LADA –≤ " . $city->city_dative . " ‚Äì –ë—Ä–∞–π—Ç –ü–∞—Ä–∫. –£–∑–Ω–∞–π—Ç–µ –ø–µ—Ä–≤—ã–º–∏ –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö";
                } elseif ( $segments[1] === 'special_offers' ) {
                    $tags->title = "–ë—Ä–∞–π—Ç –ü–∞—Ä–∫ - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–ª–µ—Ä LADA (–õ–ê–î–ê) –≤ " . $city->city_dative;
                    $tags->description = "–í—ã–±–∏—Ä–∞–µ—Ç–µ –≥–¥–µ –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é LADA (–õ–ê–î–ê) –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ –≤ " . $city->city_dative . "? –£ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞ LADA - –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –ø–æ –ª—É—á—à–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –¢–∞–∫–∂–µ –≤ –Ω–∞—à–µ–º –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–µ –≤—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω –∏ –∫—Ä–µ–¥–∏—Ç.";
                    $tags->place = $params['place'];
                } elseif ( $segments[1] === 'privacy' )
                {
                    $tags->title = "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ –≤ " . $city->city_dative;
                    $tags->description = "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ë—Ä–∞–π—Ç –ü–∞—Ä–∫";
                } elseif ( $segments[1] === 'service' )
                {
                    $tags->title = "–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞ –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ –≤ " . $city->city_dative;
                    $tags->description = "–ë—Ä–∞–π—Ç –ü–∞—Ä–∫ " . $city->title_ru . " –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –°–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –õ–∞–¥–∞ –≤ " . $city->city_dative;
                } elseif ( $segments[1] === $params['model']->slug) {
                    $tags->title = '–ù–æ–≤–∞—è LADA ' . $params['model']->title . ' –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ –≤ ' . $city->city_dative . ' | –ë—Ä–∞–π—Ç –ü–∞—Ä–∫';
                    $tags->description =  "–í—ã–±–∏—Ä–∞–µ—Ç–µ –≥–¥–µ –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é LADA " . $params['model']->title . " –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ –≤ " . $city->city_dative . "? –£ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞ LADA - –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ " . $params['model']->title . " –≤ –Ω–∞–ª–∏—á–∏–∏ –ø–æ –ª—É—á—à–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –¢–∞–∫–∂–µ —É –Ω–∞—Å –≤—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω –∏ –∫—Ä–µ–¥–∏—Ç.";
                }

                break;
            case 3:
                if ( $segments[1] === 'stocks' )
                {
                    $tags->title = $params['stocks']->title . " - –ë—Ä–∞–π—Ç –ü–∞—Ä–∫" . $city->city_dative;
                    $tags->description = mb_strimwidth($params['stocks']->text_short, 0, 157, "...") . " - –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ –≤ " . $city->city_dative;
                } elseif ( $segments[1] === 'news' )
                {
                    $tags->title = $params['news']->title . " - –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ –≤ " . $city->city_dative;
                    $tags->description = mb_strimwidth($params['news']->text_short, 0, 157, "...") . " - –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ –≤ " . $city->city_dative;
                } elseif ( $segments[1] === $params['model']->slug && $segments[2] === $params['type']->slug )
                {
                    if (strtolower($params['type']->title_ru) === strtolower($params['model']->title)) {
                        $model = $params['model']->title;
                        $model_cyrillic = $params['model']->title_ru;
                    } else {
                        $model = $params['model']->title . " " . $params['type']->title_ru;
                        $model_cyrillic = $params['model']->title_ru . " " . $params['type']->title_cyr;
                    }
                    $tags->title = "–ù–æ–≤–∞—è LADA " . $model . " –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ –≤ " . $city->city_dative . ' | –ë—Ä–∞–π—Ç –ü–∞—Ä–∫';
                    $tags->description = "–í—ã–±–∏—Ä–∞–µ—Ç–µ –≥–¥–µ –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é LADA " . $model . " –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ –≤ " . $city->city_dative . "? –£ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞ LADA - –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ " . $model . " –≤ –Ω–∞–ª–∏—á–∏–∏ –ø–æ –ª—É—á—à–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –¢–∞–∫–∂–µ —É –Ω–∞—Å –≤—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω –∏ –∫—Ä–µ–¥–∏—Ç.";
                    $tags->image = $params['image'];
                }
                break;
            case 4:
                if ( $segments[1] === $params['model']->slug && $segments[2] === $params['type']->slug && $segments[3] === 'model_details' )
                {
                    $tags->title = "–û–Ω–ª–∞–π–Ω –æ—Ü–µ–Ω–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ " . $city->title_ru;
                    $tags->description = "–ù–µ –∑–Ω–∞–µ—Ç–µ, –ø–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å? –í –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ –æ–Ω–ª–∞–π–Ω –æ—Ü–µ–Ω–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ " . $city->city_dative;
                    $tags->image = $params['image'];
                }
                break;
            default:
                $tags->title = "–ë—Ä–∞–π—Ç –ü–∞—Ä–∫ - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–ª–µ—Ä LADA (–õ–ê–î–ê) –≤ ";
                $tags->description = "–í—ã–±–∏—Ä–∞–µ—Ç–µ –≥–¥–µ –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é LADA (–õ–ê–î–ê) –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ? –£ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞ LADA - –ë—Ä–∞–π—Ç –ü–∞—Ä–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –ø–æ –ª—É—á—à–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –¢–∞–∫–∂–µ –≤ –Ω–∞—à–µ–º –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–µ –≤—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω –∏ –∫—Ä–µ–¥–∏—Ç.";
                break;
        }
        return $tags;
    }
}
